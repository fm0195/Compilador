/* The following code was generated by JFlex 1.6.1 */

package Scanner_Jflex;
import java.io.IOException;
import java_cup.runtime.ComplexSymbolFactory;
import java.util.ArrayList;
import scanner.BooleanToken;
import scanner.EOFToken;
import scanner.ErrorToken;
import scanner.FloatToken;
import scanner.IdentifierToken;
import scanner.IntegerToken;
import scanner.NullToken;
import scanner.OperatorToken;
import scanner.ReservedWordToken;
import scanner.StringToken;
import scanner.Token;
import scanner.SeparatorToken;
import scanner.CharToken;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.DefaultSymbolFactory;
import parser.sym;
import scanner.IImprimible;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>../Compilador-MyPython/src/Scanner_Jflex/Rules.flex</tt>
 */
public class MyPythonScanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int OCTOVAL = 6;
  public static final int HEXAVAL = 8;
  public static final int BINAVAL = 10;
  public static final int BLOCKCOMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\2\2\6\1\1\22\0\1\5\1\66\1\10\1\11"+
    "\1\0\1\64\1\4\1\15\2\5\1\62\1\61\1\5\1\35\1\3"+
    "\1\63\1\14\1\30\6\25\2\17\2\5\1\67\1\65\1\70\2\0"+
    "\1\71\1\27\1\21\1\22\1\34\1\32\2\12\1\12\4\12\1\72"+
    "\1\24\2\12\1\13\1\12\1\60\3\12\1\16\2\12\1\5\1\36"+
    "\1\5\1\74\1\12\1\0\1\37\1\26\1\20\1\41\1\33\1\31"+
    "\1\56\1\47\1\50\1\12\1\45\1\46\1\55\1\40\1\23\1\53"+
    "\1\12\1\43\1\42\1\44\1\51\1\12\1\57\1\52\1\54\1\12"+
    "\1\5\1\73\1\5\1\75\6\0\1\6\32\0\1\6\u15df\0\1\6"+
    "\u097f\0\13\6\35\0\2\6\5\0\1\6\57\0\1\6\u0fa0\0\1\6"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\7\7\6\1\11\14\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\1\1\17\1\20\2\6\1\21"+
    "\1\22\1\23\1\24\2\25\1\26\1\1\1\27\2\30"+
    "\1\27\1\31\2\32\1\33\1\34\2\35\1\36\1\37"+
    "\2\40\1\41\1\42\1\2\1\43\1\0\1\44\1\43"+
    "\1\45\1\46\1\47\1\43\1\44\3\6\1\50\1\51"+
    "\11\6\1\52\13\6\1\53\1\54\1\55\6\6\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\2\6\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\0\2\30\1\103"+
    "\1\0\1\103\1\0\1\43\1\0\1\104\1\43\1\0"+
    "\5\6\1\105\10\6\1\106\1\6\1\107\1\6\1\110"+
    "\1\111\4\6\1\112\2\6\1\113\7\6\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\2\6\1\122\2\6\1\123"+
    "\3\6\1\124\1\125\1\6\1\126\1\6\1\127\5\6"+
    "\1\130\2\6\1\131\3\6\1\132\1\6\1\133\1\6"+
    "\1\134\1\135\1\6\1\136\4\6\1\137\1\140\1\6"+
    "\1\141\1\6\1\142\1\6\1\143\3\6\1\144\1\145"+
    "\1\146\1\147\1\150\1\151\1\152\1\6\1\153\1\154"+
    "\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u01b2\0\u022e\0\u01b2\0\u01b2\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u01b2\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u01b2\0\u01b2\0\u01b2\0\u0ae6\0\u0b24\0\u01b2\0\u01b2"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u01b2\0\u0c98\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u0cd6\0\u01b2\0\u01b2\0\u01b2\0\u0d14\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u01b2"+
    "\0\u0e0c\0\u0e0c\0\u0e0c\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u02e8"+
    "\0\u02e8\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u01b2\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u02e8\0\u1458"+
    "\0\u02e8\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u01b2"+
    "\0\u160a\0\u01b2\0\u1648\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u1686\0\u16c4\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u1702\0\u1740"+
    "\0\u01b2\0\u01b2\0\u177e\0\u17bc\0\u17fa\0\u01b2\0\u1838\0\u01b2"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u02e8"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u02e8\0\u1c18\0\u02e8\0\u1c56\0\u02e8\0\u02e8\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u02e8\0\u1d8c\0\u1dca\0\u02e8\0\u1e08\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u01b2\0\u01b2\0\u02e8"+
    "\0\u02e8\0\u01b2\0\u01b2\0\u1fba\0\u1ff8\0\u02e8\0\u2036\0\u2074"+
    "\0\u02e8\0\u20b2\0\u20f0\0\u212e\0\u02e8\0\u02e8\0\u216c\0\u02e8"+
    "\0\u21aa\0\u02e8\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u02e8"+
    "\0\u231e\0\u235c\0\u02e8\0\u239a\0\u23d8\0\u2416\0\u02e8\0\u2454"+
    "\0\u02e8\0\u2492\0\u02e8\0\u02e8\0\u24d0\0\u02e8\0\u250e\0\u254c"+
    "\0\u258a\0\u25c8\0\u02e8\0\u02e8\0\u2606\0\u02e8\0\u2644\0\u02e8"+
    "\0\u2682\0\u02e8\0\u26c0\0\u26fe\0\u273c\0\u02e8\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u277a\0\u02e8\0\u02e8\0\u02e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\10\1\14\1\12\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\20\1\23\1\24"+
    "\2\20\1\25\1\26\1\23\1\27\1\20\1\23\1\30"+
    "\1\31\1\32\1\20\1\33\1\10\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\20\1\42\1\20\1\43\2\20"+
    "\1\44\2\20\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\5\65\1\70\25\65"+
    "\1\71\37\65\1\72\1\73\1\74\12\72\1\74\20\72"+
    "\1\75\37\72\1\76\1\77\6\100\3\76\1\100\1\101"+
    "\5\76\1\100\1\76\1\100\1\101\2\76\1\101\4\76"+
    "\1\100\22\76\16\100\1\102\1\103\6\104\3\102\1\104"+
    "\1\105\2\102\4\105\1\102\1\104\10\105\1\104\1\102"+
    "\1\105\1\102\1\105\16\102\11\104\1\105\4\104\1\106"+
    "\1\107\6\110\2\106\1\111\1\110\1\112\1\106\4\111"+
    "\1\110\1\111\1\110\3\111\1\112\4\111\1\110\1\106"+
    "\21\111\16\110\10\12\1\113\65\12\100\0\1\12\107\0"+
    "\1\114\2\0\1\114\5\0\1\114\2\0\1\114\55\0"+
    "\1\115\65\0\1\17\1\11\1\12\73\17\12\0\3\20"+
    "\1\0\17\20\2\0\22\20\10\0\2\20\3\0\1\116"+
    "\2\0\1\117\5\0\3\116\1\23\1\0\1\120\1\23"+
    "\3\116\2\121\1\23\2\122\1\23\2\123\2\124\1\0"+
    "\14\116\1\120\6\116\10\0\2\116\3\0\1\116\2\0"+
    "\1\117\5\0\3\116\1\23\1\0\1\116\1\23\5\116"+
    "\1\23\2\116\1\23\2\123\2\124\1\0\23\116\10\0"+
    "\2\116\15\0\3\20\1\0\5\20\1\125\11\20\2\0"+
    "\7\20\1\126\1\127\11\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\4\20\1\130\15\20\10\0\2\20"+
    "\15\0\1\20\1\131\1\20\1\0\17\20\2\0\22\20"+
    "\10\0\2\20\15\0\3\20\1\0\5\20\1\132\11\20"+
    "\2\0\4\20\1\133\15\20\10\0\2\20\15\0\3\20"+
    "\1\0\5\20\1\134\11\20\2\0\4\20\1\135\2\20"+
    "\1\136\1\20\1\137\10\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\1\140\21\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\7\20\1\141\3\20\1\142"+
    "\6\20\10\0\2\20\70\0\1\143\22\0\3\20\1\0"+
    "\17\20\2\0\1\20\1\144\1\20\1\145\16\20\10\0"+
    "\2\20\15\0\3\20\1\0\5\20\1\146\11\20\2\0"+
    "\12\20\1\147\7\20\10\0\2\20\15\0\3\20\1\0"+
    "\15\20\1\150\1\20\2\0\22\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\5\20\1\151\14\20\10\0"+
    "\2\20\15\0\3\20\1\0\15\20\1\152\1\20\2\0"+
    "\1\153\21\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\4\20\1\154\15\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\1\155\10\20\1\156\10\20\10\0"+
    "\2\20\15\0\3\20\1\0\13\20\1\157\3\20\2\0"+
    "\1\20\1\160\1\20\1\161\12\20\1\162\3\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\1\163\3\20"+
    "\1\164\15\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\7\20\1\165\12\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\10\20\1\166\11\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\4\20\1\167\15\20"+
    "\10\0\2\20\70\0\1\170\72\0\1\171\2\0\1\172"+
    "\73\0\1\173\1\0\1\174\75\0\1\175\75\0\1\176"+
    "\75\0\1\177\75\0\1\200\1\0\1\201\1\202\72\0"+
    "\1\203\2\0\1\204\17\0\3\20\1\0\17\20\2\0"+
    "\22\20\10\0\1\20\1\205\15\0\3\20\1\0\6\20"+
    "\1\206\10\20\2\0\22\20\10\0\2\20\3\0\1\65"+
    "\2\0\5\65\1\0\25\65\1\0\37\65\2\0\1\67"+
    "\103\0\1\207\4\0\1\210\10\0\1\211\2\0\1\212"+
    "\4\0\1\213\1\0\1\214\2\0\1\215\1\216\31\0"+
    "\1\217\1\220\1\221\12\217\1\222\60\217\2\0\1\221"+
    "\12\0\1\222\75\0\1\222\60\0\1\217\1\220\1\221"+
    "\5\217\1\223\4\217\1\224\10\217\1\223\2\217\1\223"+
    "\4\217\1\223\1\217\1\223\2\217\2\223\31\217\2\0"+
    "\1\100\75\0\1\104\75\0\1\110\103\0\1\225\101\0"+
    "\1\114\2\0\1\114\5\0\1\114\2\0\1\114\2\226"+
    "\2\227\51\0\1\230\77\0\2\116\2\0\1\116\1\0"+
    "\5\116\1\0\2\116\1\0\4\116\2\0\22\116\10\0"+
    "\2\116\15\0\2\116\1\114\1\0\1\116\1\114\5\116"+
    "\1\114\2\116\1\114\2\123\2\124\2\0\22\116\10\0"+
    "\2\116\15\0\2\116\1\231\1\0\1\116\1\231\5\116"+
    "\1\231\2\116\1\231\4\116\1\232\1\0\22\116\1\232"+
    "\7\0\2\116\15\0\3\20\1\0\17\20\2\0\1\20"+
    "\1\233\20\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\1\234\21\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\1\235\21\20\10\0\2\20\15\0\3\20"+
    "\1\0\5\20\1\236\11\20\2\0\22\20\10\0\2\20"+
    "\15\0\3\20\1\0\15\20\1\237\1\20\2\0\22\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\4\20"+
    "\1\240\15\20\10\0\2\20\15\0\3\20\1\0\5\20"+
    "\1\241\11\20\2\0\22\20\10\0\2\20\15\0\3\20"+
    "\1\0\5\20\1\242\11\20\2\0\22\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\1\20\1\243\20\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\7\20"+
    "\1\244\12\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\3\20\1\245\5\20\1\246\10\20\10\0\2\20"+
    "\15\0\3\20\1\0\2\20\1\247\12\20\1\250\1\20"+
    "\2\0\22\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\2\20\1\251\17\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\3\20\1\252\16\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\5\20\1\253\14\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\7\20"+
    "\1\254\12\20\10\0\2\20\15\0\3\20\1\0\13\20"+
    "\1\255\3\20\2\0\7\20\1\256\12\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\4\20\1\257\15\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\5\20"+
    "\1\260\14\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\1\20\1\261\7\20\1\262\10\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\15\20\1\263\4\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\16\20"+
    "\1\264\3\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\3\20\1\265\16\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\5\20\1\266\6\20\1\267\5\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\14\20"+
    "\1\270\5\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\3\20\1\271\16\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\11\20\1\272\10\20\10\0\2\20"+
    "\15\0\3\20\1\0\5\20\1\273\11\20\2\0\22\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\11\20"+
    "\1\274\10\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\12\20\1\275\7\20\10\0\2\20\70\0\1\276"+
    "\75\0\1\277\22\0\3\20\1\0\4\20\1\300\12\20"+
    "\2\0\22\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\21\20\1\301\10\0\2\20\3\0\1\217\1\220"+
    "\1\221\12\217\1\221\60\217\2\0\1\221\73\0\1\217"+
    "\1\220\1\221\12\217\1\302\60\217\15\0\1\302\70\0"+
    "\1\303\101\0\1\231\2\0\1\231\5\0\1\231\2\0"+
    "\1\231\4\0\1\232\23\0\1\232\30\0\1\231\2\0"+
    "\1\231\5\0\1\231\2\0\1\231\2\226\57\0\1\231"+
    "\2\0\1\231\5\0\1\231\2\0\1\231\57\0\3\20"+
    "\1\0\17\20\2\0\5\20\1\304\14\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\3\20\1\305\16\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\4\20"+
    "\1\306\15\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\7\20\1\307\12\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\1\310\21\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\16\20\1\311\3\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\1\312\21\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\1\313"+
    "\21\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\3\20\1\314\16\20\10\0\2\20\15\0\3\20\1\0"+
    "\15\20\1\315\1\20\2\0\22\20\10\0\2\20\15\0"+
    "\3\20\1\0\13\20\1\316\3\20\2\0\22\20\10\0"+
    "\2\20\15\0\3\20\1\0\15\20\1\317\1\20\2\0"+
    "\22\20\10\0\2\20\15\0\3\20\1\0\2\20\1\320"+
    "\14\20\2\0\22\20\10\0\2\20\15\0\3\20\1\0"+
    "\15\20\1\321\1\20\2\0\22\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\7\20\1\322\12\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\11\20\1\323"+
    "\10\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\12\20\1\324\7\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\17\20\1\325\2\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\3\20\1\326\16\20\10\0"+
    "\2\20\15\0\3\20\1\0\10\20\1\327\6\20\2\0"+
    "\22\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\5\20\1\330\14\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\12\20\1\331\7\20\10\0\2\20\15\0"+
    "\3\20\1\0\5\20\1\332\11\20\2\0\22\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\3\20\1\333"+
    "\16\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\1\20\1\334\20\20\10\0\2\20\15\0\3\20\1\0"+
    "\10\20\1\335\6\20\2\0\22\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\7\20\1\336\12\20\10\0"+
    "\2\20\15\0\3\20\1\0\15\20\1\337\1\20\2\0"+
    "\22\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\11\20\1\340\10\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\3\20\1\341\16\20\10\0\2\20\15\0"+
    "\3\20\1\0\15\20\1\342\1\20\2\0\22\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\6\20\1\343"+
    "\13\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\5\20\1\344\14\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\7\20\1\345\12\20\10\0\2\20\15\0"+
    "\3\20\1\0\15\20\1\346\1\20\2\0\22\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\14\20\1\347"+
    "\5\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\4\20\1\350\15\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\1\20\1\351\20\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\4\20\1\352\15\20\10\0"+
    "\2\20\15\0\3\20\1\0\15\20\1\353\1\20\2\0"+
    "\22\20\10\0\2\20\15\0\3\20\1\0\15\20\1\354"+
    "\1\20\2\0\22\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\2\20\1\355\17\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\5\20\1\356\14\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\4\20\1\357"+
    "\15\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\5\20\1\360\14\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\1\361\21\20\10\0\2\20\15\0\3\20"+
    "\1\0\15\20\1\362\1\20\2\0\22\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\1\20\1\363\20\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\1\364"+
    "\21\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\7\20\1\365\12\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\5\20\1\366\14\20\10\0\2\20\15\0"+
    "\3\20\1\0\17\20\2\0\5\20\1\367\14\20\10\0"+
    "\2\20\15\0\3\20\1\0\17\20\2\0\17\20\1\370"+
    "\2\20\10\0\2\20\15\0\3\20\1\0\17\20\2\0"+
    "\1\20\1\371\20\20\10\0\2\20\15\0\3\20\1\0"+
    "\17\20\2\0\1\372\21\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\5\20\1\373\14\20\10\0\2\20"+
    "\15\0\3\20\1\0\17\20\2\0\7\20\1\374\12\20"+
    "\10\0\2\20\15\0\3\20\1\0\17\20\2\0\12\20"+
    "\1\375\7\20\10\0\2\20\15\0\3\20\1\0\17\20"+
    "\2\0\1\20\1\376\20\20\10\0\2\20\15\0\3\20"+
    "\1\0\17\20\2\0\15\20\1\377\4\20\10\0\2\20"+
    "\15\0\3\20\1\0\15\20\1\u0100\1\20\2\0\22\20"+
    "\10\0\2\20\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\1\1\2\11\4\1\1\11"+
    "\37\1\3\11\2\1\2\11\5\1\1\11\1\1\3\11"+
    "\1\1\3\11\1\1\3\11\2\1\1\0\2\1\1\11"+
    "\22\1\1\11\24\1\1\11\1\1\1\11\1\1\11\11"+
    "\2\1\10\11\1\0\1\1\2\11\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\43\1\2\11\2\1"+
    "\2\11\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();
  boolean flag = false;
    
  private ArrayList<IImprimible> errores=new ArrayList<>();
  private SymbolFactory factory = new ComplexSymbolFactory();
  private long parseLong(StringBuffer pString, int radix) {
    long result = 0;
    long digit;

    for (int i = 0; i < pString.length(); i++) {
      digit  = Character.digit(pString.charAt(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }

    private Token validarLiteralInt(int maxLength, int radix, String prefix){
    try{
      yypushback(1);
    }catch(Error e)
    {
    }
    yybegin(YYINITIAL);
    if(string.length() > maxLength)
        return new ErrorToken("Numero muy grande: "+prefix+string.toString(),yyline, sym.ERROR);
    if(string.length() == 0)
        return new ErrorToken("Numero Invalido "+prefix, yyline, sym.ERROR);
    return new IntegerToken(String.valueOf(parseLong(string,radix)),yyline, sym.LITERALINT);
}

    private void addError(IImprimible t){
        errores.add(t);
    }
    public ArrayList<IImprimible> getErrores(){
        return errores;
    }
    
    
    public Symbol next_token() throws IOException{
      Token t = yylex();
      if (t instanceof ErrorToken){
            addError(t);
      }
      return t.next_token();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyPythonScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); 
                         return new ErrorToken("Fin del archivo en \"" + string.toString(), yyline, sym.LITERALSTRING);
            }
            case 257: break;
            case CHARLITERAL: {
              yybegin(YYINITIAL);
                        return new ErrorToken("Fin del archivo en \'" + string.toString(), yyline, sym.ERROR);
            }
            case 258: break;
            case OCTOVAL: {
              return validarLiteralInt(15, 8, "0o");
            }
            case 259: break;
            case HEXAVAL: {
              return validarLiteralInt(8, 16, "0x");
            }
            case 260: break;
            case BINAVAL: {
              return validarLiteralInt(64, 2, "0b");
            }
            case 261: break;
            case BLOCKCOMMENT: {
              yybegin(YYINITIAL);
            }
            case 262: break;
            default:
              {
                if(!flag){
                                    flag = true;
                                    return new EOFToken("EOF",yyline, sym.EOF);
                                  }
                                  return new EOFToken("EOF",yyline, sym.EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new ErrorToken(yytext(),yyline, sym.ERROR);
            }
          case 110: break;
          case 2: 
            { /* ignore */
            }
          case 111: break;
          case 3: 
            { String token= yytext();
                                    switch(token){
                                    case "(":
                                           return new SeparatorToken(token,yyline,sym.PARENTESISIZQ);
                                    case ")":
                                            return new SeparatorToken(token,yyline,sym.PARENTESISDER);
                                    case"[":
                                        return new SeparatorToken(token,yyline,sym.CORCHETEIZQ);
                                    case "]":
                                        return new SeparatorToken(token,yyline,sym.CORCHETEDER);
                                    case ",":
                                           return new SeparatorToken(token,yyline,sym.COMA);
                                    case ".":
                                            return new SeparatorToken(token,yyline,sym.PUNTO);
                                    case ":":
                                            return new SeparatorToken(token,yyline,sym.DOSPUNTOS);
                                    case ";":
                                            return new SeparatorToken(token,yyline,sym.PUNTOYCOMA);
                                }
            }
          case 112: break;
          case 4: 
            { return new SeparatorToken("Tab",yyline, sym.TAB);
            }
          case 113: break;
          case 5: 
            { yybegin(STRING); string.setLength(0);
            }
          case 114: break;
          case 6: 
            { return new IdentifierToken(yytext(),yyline, sym.ID);
            }
          case 115: break;
          case 7: 
            { return new IntegerToken(yytext(),yyline, sym.LITERALINT);
            }
          case 116: break;
          case 8: 
            { yybegin(CHARLITERAL); string.setLength(0);
            }
          case 117: break;
          case 9: 
            { return new OperatorToken("-",yyline,sym.MENOS);
            }
          case 118: break;
          case 10: 
            { return new OperatorToken("+",yyline,sym.MAS);
            }
          case 119: break;
          case 11: 
            { return new OperatorToken("*",yyline,sym.MULT);
            }
          case 120: break;
          case 12: 
            { return new OperatorToken("/",yyline,sym.DIV);
            }
          case 121: break;
          case 13: 
            { return new OperatorToken("%",yyline,sym.MOD);
            }
          case 122: break;
          case 14: 
            { return new OperatorToken("=",yyline,sym.ASIGNACION);
            }
          case 123: break;
          case 15: 
            { return new OperatorToken("<",yyline,sym.MENOR);
            }
          case 124: break;
          case 16: 
            { return new OperatorToken(">",yyline,sym.MAYOR);
            }
          case 125: break;
          case 17: 
            { return new OperatorToken("|",yyline, sym.BITOR);
            }
          case 126: break;
          case 18: 
            { return new OperatorToken("^",yyline, sym.BITXOR);
            }
          case 127: break;
          case 19: 
            { return new OperatorToken("~",yyline, sym.BITNOT);
            }
          case 128: break;
          case 20: 
            { string.append( yytext() );
            }
          case 129: break;
          case 21: 
            { yybegin(YYINITIAL); return new ErrorToken("Cambio de linea inesperado en \"" + string.toString(), yyline, sym.ERROR);
            }
          case 130: break;
          case 22: 
            { yybegin(YYINITIAL); return new StringToken("\""+string.toString()+"\"",yyline, sym.LITERALSTRING);
            }
          case 131: break;
          case 23: 
            { string.append(yytext());
            }
          case 132: break;
          case 24: 
            { yybegin(YYINITIAL);
              if(yytext().charAt(yylength()-1) == '\n')
                return new ErrorToken("Cambio de linea inesperado: "+yytext(),yyline, sym.ERROR);
              return new ErrorToken("Char con mas/menos de 1 elemento: \'"+yytext(),yyline, sym.ERROR);
            }
          case 133: break;
          case 25: 
            { yybegin(YYINITIAL);
                            return new ErrorToken("0o"+string.toString()+yytext(), yyline, sym.ERROR);
            }
          case 134: break;
          case 26: 
            { return validarLiteralInt(15, 8, "0o");
            }
          case 135: break;
          case 27: 
            { if(string.length() > 15)
                                return new ErrorToken("Numero muy grande: 0o"+string.toString(),yyline, sym.ERROR);
                           string.append(yytext());
            }
          case 136: break;
          case 28: 
            { yybegin(YYINITIAL); return new ErrorToken("0x"+string.toString()+yytext(), yyline, sym.ERROR);
            }
          case 137: break;
          case 29: 
            { return validarLiteralInt(8, 16, "0x");
            }
          case 138: break;
          case 30: 
            { if(string.length() > 8)
                                return new ErrorToken("Numero muy grande: "+string.toString(),yyline, sym.ERROR);
                            string.append(yytext());
            }
          case 139: break;
          case 31: 
            { yybegin(YYINITIAL); return new ErrorToken(string.toString()+yytext(), yyline, sym.ERROR);
            }
          case 140: break;
          case 32: 
            { return validarLiteralInt(64, 2, "0b");
            }
          case 141: break;
          case 33: 
            { yybegin(YYINITIAL); return new ErrorToken("0b"+string.toString()+yytext(), yyline, sym.ERROR);
            }
          case 142: break;
          case 34: 
            { if(string.length() > 64)
                                return new ErrorToken("Numero muy grande: 0b"+string.toString(),yyline, sym.ERROR);
                           string.append(yytext());
            }
          case 143: break;
          case 35: 
            { String temp= yytext();
                                    if(temp.toLowerCase().charAt(yylength()-1)=='f'){
                                        return new FloatToken(temp.substring(0,yylength()-2),yyline, sym.LITERALFLOAT);
                                    }
                                    return new FloatToken(yytext(),yyline, sym.LITERALFLOAT);
            }
          case 144: break;
          case 36: 
            { return new ErrorToken("Error. Identificador Invalido: "+yytext(),yyline, sym.ERROR);
            }
          case 145: break;
          case 37: 
            { yybegin(HEXAVAL); string.setLength(0);
            }
          case 146: break;
          case 38: 
            { yybegin(OCTOVAL); string.setLength(0);
            }
          case 147: break;
          case 39: 
            { yybegin(BINAVAL); string.setLength(0);
            }
          case 148: break;
          case 40: 
            { return new ReservedWordToken("or",yyline, sym.OR);
            }
          case 149: break;
          case 41: 
            { return new OperatorToken("OR",yyline,sym.BITOR);
            }
          case 150: break;
          case 42: 
            { return new OperatorToken("-=",yyline,sym.MENOSIGUAL);
            }
          case 151: break;
          case 43: 
            { return new ReservedWordToken("if",yyline, sym.IF);
            }
          case 152: break;
          case 44: 
            { return new ReservedWordToken("in",yyline, sym.IN);
            }
          case 153: break;
          case 45: 
            { return new ReservedWordToken("is",yyline, sym.IS);
            }
          case 154: break;
          case 46: 
            { return new OperatorToken("+=",yyline,sym.MASIGUAL);
            }
          case 155: break;
          case 47: 
            { return new OperatorToken("**",yyline,sym.POTENCIA);
            }
          case 156: break;
          case 48: 
            { return new OperatorToken("*=",yyline,sym.MULTIGUAL);
            }
          case 157: break;
          case 49: 
            { return new OperatorToken("//",yyline,sym.DIVENT);
            }
          case 158: break;
          case 50: 
            { return new OperatorToken("/=",yyline,sym.DIVIGUAL);
            }
          case 159: break;
          case 51: 
            { return new OperatorToken("%=",yyline,sym.MODIGUAL);
            }
          case 160: break;
          case 52: 
            { return new OperatorToken("==",yyline,sym.IGUALCOMP);
            }
          case 161: break;
          case 53: 
            { return new OperatorToken("!=",yyline,sym.DIFERENTE);
            }
          case 162: break;
          case 54: 
            { return new OperatorToken("<=",yyline,sym.MENORIGUAL);
            }
          case 163: break;
          case 55: 
            { return new OperatorToken("<<",yyline,sym.SHR);
            }
          case 164: break;
          case 56: 
            { return new OperatorToken("<>",yyline,sym.DISTINTO);
            }
          case 165: break;
          case 57: 
            { return new OperatorToken(">=",yyline,sym.MAYORIGUAL);
            }
          case 166: break;
          case 58: 
            { return new OperatorToken(">>",yyline,sym.SHL);
            }
          case 167: break;
          case 59: 
            { string.append( '\"' );
            }
          case 168: break;
          case 60: 
            { string.append( '\'' );
            }
          case 169: break;
          case 61: 
            { string.append( '\b' );
            }
          case 170: break;
          case 62: 
            { string.append( '\f' );
            }
          case 171: break;
          case 63: 
            { string.append( '\\' );
            }
          case 172: break;
          case 64: 
            { string.append( '\n' );
            }
          case 173: break;
          case 65: 
            { string.append( '\r' );
            }
          case 174: break;
          case 66: 
            { string.append( '\t' );
            }
          case 175: break;
          case 67: 
            { yybegin(YYINITIAL); return new CharToken("\'"+yytext(),yyline, sym.CHAR);
            }
          case 176: break;
          case 68: 
            { yybegin(BLOCKCOMMENT);
            }
          case 177: break;
          case 69: 
            { return new ReservedWordToken("for",yyline, sym.FOR);
            }
          case 178: break;
          case 70: 
            { return new ReservedWordToken("and",yyline, sym.AND);
            }
          case 179: break;
          case 71: 
            { return new ReservedWordToken("not",yyline, sym.NOT);
            }
          case 180: break;
          case 72: 
            { return new ReservedWordToken("def",yyline, sym.DEF);
            }
          case 181: break;
          case 73: 
            { return new ReservedWordToken("del",yyline, sym.DEL);
            }
          case 182: break;
          case 74: 
            { return new ReservedWordToken("try",yyline, sym.TRY);
            }
          case 183: break;
          case 75: 
            { return new ReservedWordToken("int",yyline, sym.INT);
            }
          case 184: break;
          case 76: 
            { return new OperatorToken("**=",yyline,sym.POTIGUAL);
            }
          case 185: break;
          case 77: 
            { return new OperatorToken("//=",yyline,sym.DIVENTIGUAL);
            }
          case 186: break;
          case 78: 
            { return new OperatorToken("AND",yyline,sym.BITAND);
            }
          case 187: break;
          case 79: 
            { return new OperatorToken("NOT",yyline,sym.BITNOT);
            }
          case 188: break;
          case 80: 
            { yybegin(YYINITIAL); return new CharToken("\'"+yytext(),yyline, sym.LITERALCHAR);
            }
          case 189: break;
          case 81: 
            { yybegin(YYINITIAL);
            }
          case 190: break;
          case 82: 
            { return new ReservedWordToken("char",yyline, sym.CHAR);
            }
          case 191: break;
          case 83: 
            { return new ReservedWordToken("from",yyline, sym.FROM);
            }
          case 192: break;
          case 84: 
            { return new ReservedWordToken("else",yyline, sym.ELSE);
            }
          case 193: break;
          case 85: 
            { return new ReservedWordToken("elif",yyline, sym.ELIF);
            }
          case 194: break;
          case 86: 
            { return new ReservedWordToken("exec",yyline, sym.EXEC);
            }
          case 195: break;
          case 87: 
            { return new NullToken("null",yyline, sym.LITERALNULL);
            }
          case 196: break;
          case 88: 
            { return new ReservedWordToken("list",yyline, sym.LIST);
            }
          case 197: break;
          case 89: 
            { return new ReservedWordToken("pass",yyline, sym.PASS);
            }
          case 198: break;
          case 90: 
            { return new BooleanToken("True",yyline, sym.LITERALTRUE);
            }
          case 199: break;
          case 91: 
            { return new ReservedWordToken("class",yyline, sym.CLASS);
            }
          case 200: break;
          case 92: 
            { return new ReservedWordToken("break",yyline, sym.BREAK);
            }
          case 201: break;
          case 93: 
            { return new ReservedWordToken("float",yyline, sym.FLOAT);
            }
          case 202: break;
          case 94: 
            { return new BooleanToken("False",yyline, sym.LITERALFALSE);
            }
          case 203: break;
          case 95: 
            { return new ReservedWordToken("range",yyline, sym.RANGE);
            }
          case 204: break;
          case 96: 
            { return new ReservedWordToken("raise",yyline, sym.RAISE);
            }
          case 205: break;
          case 97: 
            { return new ReservedWordToken("input",yyline, sym.INPUT);
            }
          case 206: break;
          case 98: 
            { return new ReservedWordToken("print",yyline, sym.PRINT);
            }
          case 207: break;
          case 99: 
            { return new ReservedWordToken("while",yyline, sym.WHILE);
            }
          case 208: break;
          case 100: 
            { return new ReservedWordToken("except",yyline, sym.EXCEPT);
            }
          case 209: break;
          case 101: 
            { return new ReservedWordToken("assert",yyline, sym.ASSERT);
            }
          case 210: break;
          case 102: 
            { return new ReservedWordToken("string",yyline, sym.STRING);
            }
          case 211: break;
          case 103: 
            { return new ReservedWordToken("return",yyline, sym.RETURN);
            }
          case 212: break;
          case 104: 
            { return new ReservedWordToken("lambda",yyline, sym.LAMBDA);
            }
          case 213: break;
          case 105: 
            { return new ReservedWordToken("import",yyline, sym.IMPORT);
            }
          case 214: break;
          case 106: 
            { return new ReservedWordToken("global",yyline, sym.GLOBAL);
            }
          case 215: break;
          case 107: 
            { return new ReservedWordToken("boolean",yyline, sym.BOOLEAN);
            }
          case 216: break;
          case 108: 
            { return new ReservedWordToken("finally",yyline, sym.FINALLY);
            }
          case 217: break;
          case 109: 
            { return new ReservedWordToken("continue",yyline, sym.CONTINUE);
            }
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
