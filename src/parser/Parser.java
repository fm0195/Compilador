
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import parser.Nodo;
import java_cup.runtime.*;
import java.util.ArrayList;
import Scanner_Jflex.MyPythonScanner;
import Semantico.Analizador;
import Semantico.GeneradorCodigo;
import java.io.IOException;
import scanner.BooleanToken;
import scanner.EOFToken;
import scanner.ErrorToken;
import scanner.FloatToken;
import scanner.IdentifierToken;
import scanner.IntegerToken;
import scanner.NullToken;
import scanner.OperatorToken;
import scanner.ReservedWordToken;
import scanner.StringToken;
import scanner.Token;
import scanner.SeparatorToken;
import scanner.CharToken;
import scanner.IImprimible;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\323\000\002\057\003\000\002\002\004\000\002\057" +
    "\003\000\002\057\002\000\002\056\007\000\002\056\006" +
    "\000\002\056\006\000\002\056\005\000\002\056\005\000" +
    "\002\056\006\000\002\006\006\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\007\004\000\002\007" +
    "\002\000\002\010\003\000\002\010\002\000\002\055\003" +
    "\000\002\055\002\000\002\032\003\000\002\032\002\000" +
    "\002\013\004\000\002\013\006\000\002\013\005\000\002" +
    "\013\004\000\002\013\004\000\002\052\005\000\002\052" +
    "\003\000\002\052\004\000\002\011\004\000\002\011\003" +
    "\000\002\012\004\000\002\012\002\000\002\012\005\000" +
    "\002\012\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\047\004" +
    "\000\002\047\003\000\002\040\011\000\002\040\007\000" +
    "\002\040\005\000\002\041\003\000\002\041\003\000\002" +
    "\043\006\000\002\043\006\000\002\043\005\000\002\043" +
    "\004\000\002\043\005\000\002\043\004\000\002\042\003" +
    "\000\002\042\005\000\002\044\003\000\002\044\005\000" +
    "\002\044\007\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\036\010\000\002\036" +
    "\010\000\002\036\005\000\002\036\010\000\002\036\007" +
    "\000\002\036\007\000\002\050\007\000\002\050\006\000" +
    "\002\050\007\000\002\050\006\000\002\050\005\000\002" +
    "\037\006\000\002\037\002\000\002\037\004\000\002\033" +
    "\007\000\002\033\007\000\002\033\006\000\002\035\007" +
    "\000\002\035\010\000\002\035\007\000\002\035\010\000" +
    "\002\035\005\000\002\035\006\000\002\046\010\000\002" +
    "\046\006\000\002\046\010\000\002\046\006\000\002\046" +
    "\005\000\002\046\007\000\002\046\005\000\002\046\007" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\002\000\002\024\003\000\002\025\004\000" +
    "\002\025\005\000\002\027\006\000\002\031\003\000\002" +
    "\031\002\000\002\026\003\000\002\026\004\000\002\026" +
    "\004\000\002\026\005\000\002\026\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\007\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\030\004\000\002\030\005" +
    "\000\002\030\003\000\002\002\011\000\002\002\010\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\004\000\002\003\005\000\002\003\004\000\002\004" +
    "\004\000\002\004\006\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\051\003\000\002\051\002\000\002" +
    "\054\005\000\002\054\004\000\002\054\005\000\002\054" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\072\002\ufffe\003\ufff2\004\ufff2\006\ufff2\010" +
    "\ufff2\020\ufff2\055\011\057\010\064\ufff2\065\ufff2\067\ufff2" +
    "\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101" +
    "\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2" +
    "\110\ufff2\114\ufff2\124\ufff2\126\ufff2\001\002\000\072\002" +
    "\ufff2\003\ufff2\004\ufff2\006\ufff2\010\ufff2\015\ufff2\020\ufff2" +
    "\057\010\064\ufff2\065\ufff2\067\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2" +
    "\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\114\ufff2\124" +
    "\ufff2\126\ufff2\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\002\u0166\001\002\000\010\003" +
    "\u0150\004\u014f\014\u0151\001\002\000\006\003\u014c\004\u014b" +
    "\001\002\000\070\002\ufff2\003\ufff2\004\ufff2\006\ufff2\010" +
    "\ufff2\015\ufff2\020\ufff2\057\010\064\ufff2\065\ufff2\067\ufff2" +
    "\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\014\100\021\101" +
    "\024\102\020\103\015\104\023\105\ufff2\106\ufff2\107\ufff2" +
    "\110\ufff2\114\ufff2\124\ufff2\001\002\000\070\002\ufff0\003" +
    "\ufff0\004\ufff0\006\ufff0\010\ufff0\020\ufff0\057\ufff0\064\ufff0" +
    "\065\ufff0\067\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\ufff0" +
    "\106\ufff0\107\ufff0\110\ufff0\114\ufff0\124\ufff0\126\ufff0\001" +
    "\002\000\106\002\uff3a\003\uff3a\004\uff3a\006\uff3a\010\uff3a" +
    "\015\uff3a\020\uff3a\054\uff3a\056\uff3a\057\uff3a\060\uff3a\061" +
    "\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a\067\uff3a\073\uff3a" +
    "\074\uff3a\075\uff3a\076\uff3a\077\uff3a\100\uff3a\101\uff3a\102" +
    "\uff3a\103\uff3a\104\uff3a\105\uff3a\106\uff3a\107\uff3a\110\uff3a" +
    "\114\uff3a\124\uff3a\126\uff3a\001\002\000\106\002\uff36\003" +
    "\uff36\004\uff36\006\uff36\010\uff36\015\uff36\020\uff36\054\uff36" +
    "\056\uff36\057\uff36\060\uff36\061\uff36\062\uff36\063\uff36\064" +
    "\uff36\065\uff36\067\uff36\073\uff36\074\uff36\075\uff36\076\uff36" +
    "\077\uff36\100\uff36\101\uff36\102\uff36\103\uff36\104\uff36\105" +
    "\uff36\106\uff36\107\uff36\110\uff36\114\uff36\124\uff36\126\uff36" +
    "\001\002\000\070\002\ufff4\003\057\004\053\006\054\010" +
    "\045\020\060\057\010\064\041\065\052\067\040\073\077" +
    "\074\056\075\063\076\073\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\126\070\001\002\000\070\002\ufff1\003" +
    "\ufff1\004\ufff1\006\ufff1\010\ufff1\020\ufff1\057\ufff1\064\ufff1" +
    "\065\ufff1\067\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\106\ufff1\107\ufff1\110\ufff1\114\ufff1\124\ufff1\126\ufff1\001" +
    "\002\000\106\002\uff37\003\uff37\004\uff37\006\uff37\010\uff37" +
    "\015\uff37\020\uff37\054\uff37\056\uff37\057\uff37\060\uff37\061" +
    "\uff37\062\uff37\063\uff37\064\uff37\065\uff37\067\uff37\073\uff37" +
    "\074\uff37\075\uff37\076\uff37\077\uff37\100\uff37\101\uff37\102" +
    "\uff37\103\uff37\104\uff37\105\uff37\106\uff37\107\uff37\110\uff37" +
    "\114\uff37\124\uff37\126\uff37\001\002\000\106\002\uff39\003" +
    "\uff39\004\uff39\006\uff39\010\uff39\015\uff39\020\uff39\054\uff39" +
    "\056\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064" +
    "\uff39\065\uff39\067\uff39\073\uff39\074\uff39\075\uff39\076\uff39" +
    "\077\uff39\100\uff39\101\uff39\102\uff39\103\uff39\104\uff39\105" +
    "\uff39\106\uff39\107\uff39\110\uff39\114\uff39\124\uff39\126\uff39" +
    "\001\002\000\022\003\027\004\026\077\014\100\021\101" +
    "\024\102\020\103\015\104\023\001\002\000\106\002\uff35" +
    "\003\uff35\004\uff35\006\uff35\010\uff35\015\uff35\020\uff35\054" +
    "\uff35\056\uff35\057\uff35\060\uff35\061\uff35\062\uff35\063\uff35" +
    "\064\uff35\065\uff35\067\uff35\073\uff35\074\uff35\075\uff35\076" +
    "\uff35\077\uff35\100\uff35\101\uff35\102\uff35\103\uff35\104\uff35" +
    "\105\uff35\106\uff35\107\uff35\110\uff35\114\uff35\124\uff35\126" +
    "\uff35\001\002\000\106\002\uff38\003\uff38\004\uff38\006\uff38" +
    "\010\uff38\015\uff38\020\uff38\054\uff38\056\uff38\057\uff38\060" +
    "\uff38\061\uff38\062\uff38\063\uff38\064\uff38\065\uff38\067\uff38" +
    "\073\uff38\074\uff38\075\uff38\076\uff38\077\uff38\100\uff38\101" +
    "\uff38\102\uff38\103\uff38\104\uff38\105\uff38\106\uff38\107\uff38" +
    "\110\uff38\114\uff38\124\uff38\126\uff38\001\002\000\106\002" +
    "\uffe8\003\uffe8\004\uffe8\006\uffe8\010\uffe8\015\uffe8\020\uffe8" +
    "\054\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\065\uffe8\067\uffe8\073\uffe8\074\uffe8\075\uffe8" +
    "\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8\114\uffe8\124\uffe8" +
    "\126\uffe8\001\002\000\110\002\uffeb\003\uffeb\004\uffeb\006" +
    "\uffeb\010\uffeb\012\030\015\uffeb\020\uffeb\054\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\067\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\uffeb\106" +
    "\uffeb\107\uffeb\110\uffeb\114\uffeb\124\uffeb\126\uffeb\001\002" +
    "\000\106\002\uffe7\003\uffe7\004\uffe7\006\uffe7\010\uffe7\015" +
    "\uffe7\020\uffe7\054\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\065\uffe7\067\uffe7\073\uffe7\074" +
    "\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7" +
    "\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\114" +
    "\uffe7\124\uffe7\126\uffe7\001\002\000\004\004\032\001\002" +
    "\000\106\002\uffe9\003\uffe9\004\uffe9\006\uffe9\010\uffe9\015" +
    "\uffe9\020\uffe9\054\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\067\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9" +
    "\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\114" +
    "\uffe9\124\uffe9\126\uffe9\001\002\000\110\002\uffe5\003\uffe5" +
    "\004\uffe5\006\uffe5\010\uffe5\012\034\015\uffe5\020\uffe5\054" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\067\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\014\100\021\101\024\102\020\103\015\104\023" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\114\uffe5\124\uffe5\126" +
    "\uffe5\001\002\000\106\002\uffea\003\uffea\004\uffea\006\uffea" +
    "\010\uffea\015\uffea\020\uffea\054\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\067\uffea" +
    "\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101" +
    "\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107\uffea" +
    "\110\uffea\114\uffea\124\uffea\126\uffea\001\002\000\004\004" +
    "\032\001\002\000\106\002\uffe4\003\uffe4\004\uffe4\006\uffe4" +
    "\010\uffe4\015\uffe4\020\uffe4\054\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\067\uffe4" +
    "\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4" +
    "\110\uffe4\114\uffe4\124\uffe4\126\uffe4\001\002\000\106\002" +
    "\uffe6\003\uffe6\004\uffe6\006\uffe6\010\uffe6\015\uffe6\020\uffe6" +
    "\054\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\067\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104" +
    "\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\114\uffe6\124\uffe6" +
    "\126\uffe6\001\002\000\106\002\uffda\003\uffda\004\uffda\006" +
    "\uffda\010\uffda\015\uffda\020\uffda\054\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\067" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda" +
    "\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107" +
    "\uffda\110\uffda\114\uffda\124\uffda\126\uffda\001\002\000\004" +
    "\006\u013e\001\002\000\006\003\u011b\004\u011a\001\002\000" +
    "\106\002\uffd7\003\uffd7\004\uffd7\006\uffd7\010\uffd7\015\uffd7" +
    "\020\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103" +
    "\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\114\uffd7" +
    "\124\uffd7\126\uffd7\001\002\000\212\002\uff70\003\uff70\004" +
    "\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70\014\uff70" +
    "\015\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\024" +
    "\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\056\uff70\057" +
    "\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70" +
    "\067\uff70\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076" +
    "\uff70\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70" +
    "\105\uff70\106\uff70\107\uff70\110\uff70\114\uff70\124\uff70\126" +
    "\uff70\001\002\000\212\002\uff6a\003\uff6a\004\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\011\uff6a\012\uff6a\014\uff6a\015\uff6a\017" +
    "\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a" +
    "\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034" +
    "\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\052\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\067\uff6a\071" +
    "\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106" +
    "\uff6a\107\uff6a\110\uff6a\114\uff6a\124\uff6a\126\uff6a\001\002" +
    "\000\052\003\057\004\053\006\054\010\045\011\uff5f\020" +
    "\060\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\001\002\000\212\002\uff63\003\uff63\004\uff63" +
    "\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63\014\uff63\015" +
    "\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63" +
    "\025\uff63\026\115\027\uff63\030\uff63\031\uff63\032\uff63\033" +
    "\uff63\034\112\035\107\036\113\037\111\040\117\041\116" +
    "\042\114\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050" +
    "\uff63\051\uff63\052\uff63\053\uff63\054\uff63\056\uff63\057\uff63" +
    "\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\067" +
    "\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63" +
    "\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105" +
    "\uff63\106\uff63\107\uff63\110\uff63\114\uff63\124\uff63\126\uff63" +
    "\001\002\000\212\002\uff64\003\uff64\004\uff64\006\uff64\007" +
    "\uff64\010\uff64\011\uff64\012\uff64\014\uff64\015\uff64\017\uff64" +
    "\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026" +
    "\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64" +
    "\035\uff64\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043" +
    "\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64" +
    "\052\uff64\053\uff64\054\uff64\056\uff64\057\uff64\060\uff64\061" +
    "\uff64\062\uff64\063\uff64\064\uff64\065\uff64\067\uff64\071\uff64" +
    "\072\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100" +
    "\uff64\101\uff64\102\uff64\103\uff64\104\uff64\105\uff64\106\uff64" +
    "\107\uff64\110\uff64\114\uff64\124\uff64\126\uff64\001\002\000" +
    "\212\002\uff65\003\uff65\004\uff65\006\uff65\007\uff65\010\uff65" +
    "\011\uff65\012\uff65\014\uff65\015\uff65\017\uff65\020\uff65\021" +
    "\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65" +
    "\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036" +
    "\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65" +
    "\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053" +
    "\uff65\054\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65" +
    "\063\uff65\064\uff65\065\uff65\067\uff65\071\uff65\072\uff65\073" +
    "\uff65\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65" +
    "\102\uff65\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\110" +
    "\uff65\114\uff65\124\uff65\126\uff65\001\002\000\212\002\uff67" +
    "\003\uff67\004\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012" +
    "\uff67\014\uff67\015\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031" +
    "\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\056\uff67\057\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064" +
    "\uff67\065\uff67\067\uff67\071\uff67\072\uff67\073\uff67\074\uff67" +
    "\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103" +
    "\uff67\104\uff67\105\uff67\106\uff67\107\uff67\110\uff67\114\uff67" +
    "\124\uff67\126\uff67\001\002\000\050\003\364\004\053\006" +
    "\205\010\045\020\060\067\040\073\077\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\214\002\uff6c" +
    "\003\341\004\uff6c\006\340\007\uff6c\010\336\011\uff6c\012" +
    "\uff6c\013\335\014\uff6c\015\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\115\027\uff6c\030" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\034\112\035\107\036\113" +
    "\037\111\040\117\041\116\042\114\043\uff6c\044\uff6c\045" +
    "\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c" +
    "\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\067\uff6c\071\uff6c\072\uff6c\073\uff6c" +
    "\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102" +
    "\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110\uff6c" +
    "\114\uff6c\124\uff6c\126\uff6c\001\002\000\050\003\057\004" +
    "\053\006\205\010\045\020\060\067\040\073\077\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\001\002\000\006" +
    "\002\ufff6\126\327\001\002\000\106\002\uffd4\003\057\004" +
    "\053\006\054\010\045\015\uffd4\020\060\054\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\067\040\073\077\074\uffd4\075\uffd4\076\uffd4\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\126\uffd4\001\002" +
    "\000\212\002\uff6f\003\uff6f\004\uff6f\006\uff6f\007\uff6f\010" +
    "\uff6f\011\uff6f\012\uff6f\014\uff6f\015\uff6f\017\uff6f\020\uff6f" +
    "\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\115\027" +
    "\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\112\035\107" +
    "\036\113\037\111\040\117\041\116\042\114\043\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\054\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062" +
    "\uff6f\063\uff6f\064\uff6f\065\uff6f\067\uff6f\071\uff6f\072\uff6f" +
    "\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101" +
    "\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f" +
    "\110\uff6f\114\uff6f\124\uff6f\126\uff6f\001\002\000\050\003" +
    "\057\004\053\006\054\010\045\020\060\067\040\073\077" +
    "\077\014\100\021\101\024\102\020\103\015\104\023\105" +
    "\061\106\044\107\067\110\062\114\051\124\100\001\002" +
    "\000\212\002\uff6b\003\uff6b\004\uff6b\006\uff6b\007\uff6b\010" +
    "\uff6b\011\uff6b\012\uff6b\014\uff6b\015\uff6b\017\uff6b\020\uff6b" +
    "\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027" +
    "\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b" +
    "\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044" +
    "\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\067\uff6b\071\uff6b\072\uff6b" +
    "\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101" +
    "\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b" +
    "\110\uff6b\114\uff6b\124\uff6b\126\uff6b\001\002\000\212\002" +
    "\uff68\003\uff68\004\uff68\006\uff68\007\uff68\010\uff68\011\uff68" +
    "\012\uff68\014\uff68\015\uff68\017\uff68\020\uff68\021\uff68\022" +
    "\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68" +
    "\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68" +
    "\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054" +
    "\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062\uff68\063\uff68" +
    "\064\uff68\065\uff68\067\uff68\071\uff68\072\uff68\073\uff68\074" +
    "\uff68\075\uff68\076\uff68\077\uff68\100\uff68\101\uff68\102\uff68" +
    "\103\uff68\104\uff68\105\uff68\106\uff68\107\uff68\110\uff68\114" +
    "\uff68\124\uff68\126\uff68\001\002\000\006\003\264\014\265" +
    "\001\002\000\174\002\uffdd\003\uffdd\004\uffdd\006\uffdd\010" +
    "\uffdd\015\uffdd\017\146\020\124\021\137\022\141\023\133" +
    "\024\122\025\131\026\115\027\132\030\140\031\135\032" +
    "\143\033\126\034\112\035\107\036\113\037\111\040\117" +
    "\041\116\042\114\043\145\044\142\045\123\046\127\047" +
    "\144\050\130\051\134\052\125\054\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\067" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107" +
    "\uffdd\110\uffdd\114\uffdd\124\uffdd\126\uffdd\001\002\000\106" +
    "\002\uffdc\003\uffdc\004\uffdc\006\uffdc\010\uffdc\015\uffdc\020" +
    "\uffdc\054\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\067\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\114\uffdc\124" +
    "\uffdc\126\uffdc\001\002\000\106\002\uffdb\003\uffdb\004\uffdb" +
    "\006\uffdb\010\uffdb\015\uffdb\020\uffdb\054\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\067\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\114\uffdb\124\uffdb\126\uffdb\001\002\000" +
    "\214\002\uff69\003\uff69\004\uff69\006\uff69\007\uff69\010\uff69" +
    "\011\uff69\012\uff69\013\257\014\uff69\015\uff69\017\uff69\020" +
    "\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69" +
    "\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\056\uff69\057\uff69\060\uff69\061\uff69" +
    "\062\uff69\063\uff69\064\uff69\065\uff69\067\uff69\071\uff69\072" +
    "\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69" +
    "\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107" +
    "\uff69\110\uff69\114\uff69\124\uff69\126\uff69\001\002\000\004" +
    "\002\ufff5\001\002\000\106\002\uffd6\003\uffd6\004\uffd6\006" +
    "\177\010\uffd6\015\uffd6\020\uffd6\054\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\067" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6" +
    "\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107" +
    "\uffd6\110\uffd6\114\uffd6\124\uffd6\126\uffd6\001\002\000\106" +
    "\002\uffd9\003\uffd9\004\uffd9\006\uffd9\010\uffd9\015\uffd9\020" +
    "\uffd9\054\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\067\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\114\uffd9\124" +
    "\uffd9\126\uffd9\001\002\000\050\003\206\004\053\006\205" +
    "\010\045\020\060\067\040\073\077\077\014\100\021\101" +
    "\024\102\020\103\015\104\023\105\061\106\044\107\067" +
    "\110\062\114\051\124\100\001\002\000\070\002\uffe2\003" +
    "\057\004\053\006\054\010\045\020\060\057\010\064\041" +
    "\065\052\067\040\073\077\074\056\075\063\076\073\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\061" +
    "\106\044\107\067\110\062\114\051\124\100\126\uffe2\001" +
    "\002\000\106\002\uffd8\003\uffd8\004\uffd8\006\uffd8\010\uffd8" +
    "\015\uffd8\020\uffd8\054\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\067\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8" +
    "\114\uffd8\124\uffd8\126\uffd8\001\002\000\212\002\uff6d\003" +
    "\uff6d\004\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d" +
    "\014\uff6d\015\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023" +
    "\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d" +
    "\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\056" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d" +
    "\065\uff6d\067\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d\075" +
    "\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d" +
    "\104\uff6d\105\uff6d\106\uff6d\107\uff6d\110\uff6d\114\uff6d\124" +
    "\uff6d\126\uff6d\001\002\000\004\006\101\001\002\000\212" +
    "\002\uff66\003\uff66\004\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\014\uff66\015\uff66\017\uff66\020\uff66\021\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66" +
    "\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045" +
    "\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66\063" +
    "\uff66\064\uff66\065\uff66\067\uff66\071\uff66\072\uff66\073\uff66" +
    "\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66\102" +
    "\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66" +
    "\114\uff66\124\uff66\126\uff66\001\002\000\052\003\105\004" +
    "\053\006\054\007\104\010\045\020\060\067\040\073\077" +
    "\077\014\100\021\101\024\102\020\103\015\104\023\105" +
    "\061\106\044\107\067\110\062\114\051\124\100\001\002" +
    "\000\004\006\177\001\002\000\076\007\175\012\174\017" +
    "\146\020\124\021\137\022\141\023\133\024\122\025\131" +
    "\026\115\027\132\030\140\031\135\032\143\033\126\034" +
    "\112\035\107\036\113\037\111\040\117\041\116\042\114" +
    "\043\145\044\142\045\123\046\127\047\144\050\130\051" +
    "\134\052\125\001\002\000\212\002\uff50\003\uff50\004\uff50" +
    "\006\uff50\007\uff50\010\uff50\011\uff50\012\uff50\014\uff50\015" +
    "\uff50\017\uff50\020\uff50\021\uff50\022\uff50\023\uff50\024\uff50" +
    "\025\uff50\026\uff50\027\uff50\030\uff50\031\uff50\032\uff50\033" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050" +
    "\uff50\051\uff50\052\uff50\053\uff50\054\uff50\056\uff50\057\uff50" +
    "\060\uff50\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50\067" +
    "\uff50\071\uff50\072\uff50\073\uff50\074\uff50\075\uff50\076\uff50" +
    "\077\uff50\100\uff50\101\uff50\102\uff50\103\uff50\104\uff50\105" +
    "\uff50\106\uff50\107\uff50\110\uff50\114\uff50\124\uff50\126\uff50" +
    "\001\002\000\212\002\uff45\003\uff45\004\uff45\006\uff45\007" +
    "\uff6f\010\uff45\011\uff45\012\uff6f\014\uff45\015\uff45\017\uff6f" +
    "\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026" +
    "\115\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\112" +
    "\035\107\036\113\037\111\040\117\041\116\042\114\043" +
    "\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\052\uff6f\053\uff45\054\uff45\056\uff45\057\uff45\060\uff45\061" +
    "\uff45\062\uff45\063\uff45\064\uff45\065\uff45\067\uff45\071\uff45" +
    "\072\uff45\073\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100" +
    "\uff45\101\uff45\102\uff45\103\uff45\104\uff45\105\uff45\106\uff45" +
    "\107\uff45\110\uff45\114\uff45\124\uff45\126\uff45\001\002\000" +
    "\212\002\uff51\003\uff51\004\uff51\006\uff51\007\uff51\010\uff51" +
    "\011\uff51\012\uff51\014\uff51\015\uff51\017\uff51\020\uff51\021" +
    "\uff51\022\uff51\023\uff51\024\uff51\025\uff51\026\uff51\027\uff51" +
    "\030\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035\uff51\036" +
    "\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51\044\uff51" +
    "\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51\053" +
    "\uff51\054\uff51\056\uff51\057\uff51\060\uff51\061\uff51\062\uff51" +
    "\063\uff51\064\uff51\065\uff51\067\uff51\071\uff51\072\uff51\073" +
    "\uff51\074\uff51\075\uff51\076\uff51\077\uff51\100\uff51\101\uff51" +
    "\102\uff51\103\uff51\104\uff51\105\uff51\106\uff51\107\uff51\110" +
    "\uff51\114\uff51\124\uff51\126\uff51\001\002\000\050\003\uff8c" +
    "\004\uff8c\006\uff8c\010\uff8c\020\uff8c\067\uff8c\073\uff8c\077" +
    "\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c" +
    "\106\uff8c\107\uff8c\110\uff8c\114\uff8c\124\uff8c\001\002\000" +
    "\050\003\121\004\053\006\054\010\045\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\050\003\uff8a\004\uff8a\006\uff8a\010\uff8a\020" +
    "\uff8a\067\uff8a\073\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a" +
    "\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\114" +
    "\uff8a\124\uff8a\001\002\000\050\003\uff8d\004\uff8d\006\uff8d" +
    "\010\uff8d\020\uff8d\067\uff8d\073\uff8d\077\uff8d\100\uff8d\101" +
    "\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d" +
    "\110\uff8d\114\uff8d\124\uff8d\001\002\000\050\003\uff8b\004" +
    "\uff8b\006\uff8b\010\uff8b\020\uff8b\067\uff8b\073\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106" +
    "\uff8b\107\uff8b\110\uff8b\114\uff8b\124\uff8b\001\002\000\050" +
    "\003\uff87\004\uff87\006\uff87\010\uff87\020\uff87\067\uff87\073" +
    "\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87\104\uff87" +
    "\105\uff87\106\uff87\107\uff87\110\uff87\114\uff87\124\uff87\001" +
    "\002\000\050\003\uff8e\004\uff8e\006\uff8e\010\uff8e\020\uff8e" +
    "\067\uff8e\073\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103" +
    "\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\114\uff8e" +
    "\124\uff8e\001\002\000\050\003\uff88\004\uff88\006\uff88\010" +
    "\uff88\020\uff88\067\uff88\073\uff88\077\uff88\100\uff88\101\uff88" +
    "\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110" +
    "\uff88\114\uff88\124\uff88\001\002\000\050\003\uff89\004\uff89" +
    "\006\uff89\010\uff89\020\uff89\067\uff89\073\uff89\077\uff89\100" +
    "\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89" +
    "\107\uff89\110\uff89\114\uff89\124\uff89\001\002\000\212\002" +
    "\uff90\003\uff90\004\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\014\uff90\015\uff90\017\146\020\124\021\137\022" +
    "\141\023\133\024\122\025\131\026\115\027\132\030\140" +
    "\031\135\032\143\033\126\034\112\035\107\036\113\037" +
    "\111\040\117\041\116\042\114\043\145\044\142\045\123" +
    "\046\127\047\144\050\130\051\134\052\125\053\uff90\054" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\067\uff90\071\uff90\072\uff90\073\uff90\074" +
    "\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90" +
    "\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110\uff90\114" +
    "\uff90\124\uff90\126\uff90\001\002\000\212\002\uff8f\003\uff8f" +
    "\004\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\014" +
    "\uff8f\015\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\115\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\112\035\107\036\113\037\111\040\117" +
    "\041\116\042\114\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\067\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104" +
    "\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\114\uff8f\124\uff8f" +
    "\126\uff8f\001\002\000\050\003\057\004\053\006\054\010" +
    "\045\020\060\067\040\073\077\077\014\100\021\101\024" +
    "\102\020\103\015\104\023\105\061\106\044\107\067\110" +
    "\062\114\051\124\100\001\002\000\050\003\057\004\053" +
    "\006\054\010\045\020\060\067\040\073\077\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\001\002\000\050\003" +
    "\057\004\053\006\054\010\045\020\060\067\040\073\077" +
    "\077\014\100\021\101\024\102\020\103\015\104\023\105" +
    "\061\106\044\107\067\110\062\114\051\124\100\001\002" +
    "\000\050\003\057\004\053\006\054\010\045\020\060\067" +
    "\040\073\077\077\014\100\021\101\024\102\020\103\015" +
    "\104\023\105\061\106\044\107\067\110\062\114\051\124" +
    "\100\001\002\000\050\003\057\004\053\006\054\010\045" +
    "\020\060\067\040\073\077\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\001\002\000\050\003\057\004\053\006" +
    "\054\010\045\020\060\067\040\073\077\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\050\003\057" +
    "\004\053\006\054\010\045\020\060\067\040\073\077\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\061" +
    "\106\044\107\067\110\062\114\051\124\100\001\002\000" +
    "\050\003\057\004\053\006\054\010\045\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\050\003\057\004\053\006\054\010\045\020" +
    "\060\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\001\002\000\050\003\057\004\053\006\054" +
    "\010\045\020\060\067\040\073\077\077\014\100\021\101" +
    "\024\102\020\103\015\104\023\105\061\106\044\107\067" +
    "\110\062\114\051\124\100\001\002\000\050\003\057\004" +
    "\053\006\054\010\045\020\060\067\040\073\077\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\001\002\000\050" +
    "\003\057\004\053\006\054\010\045\020\060\067\040\073" +
    "\077\077\014\100\021\101\024\102\020\103\015\104\023" +
    "\105\061\106\044\107\067\110\062\114\051\124\100\001" +
    "\002\000\004\003\157\001\002\000\050\003\057\004\053" +
    "\006\054\010\045\020\060\067\040\073\077\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\001\002\000\050\003" +
    "\057\004\053\006\054\010\045\020\060\067\040\073\077" +
    "\077\014\100\021\101\024\102\020\103\015\104\023\105" +
    "\061\106\044\107\067\110\062\114\051\124\100\001\002" +
    "\000\050\003\057\004\053\006\054\010\045\020\060\067" +
    "\040\073\077\077\014\100\021\101\024\102\020\103\015" +
    "\104\023\105\061\106\044\107\067\110\062\114\051\124" +
    "\100\001\002\000\050\003\057\004\053\006\054\010\045" +
    "\020\060\067\040\073\077\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\001\002\000\050\003\057\004\053\006" +
    "\054\010\045\020\060\067\040\073\077\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\050\003\057" +
    "\004\053\006\054\010\045\020\060\067\040\073\077\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\061" +
    "\106\044\107\067\110\062\114\051\124\100\001\002\000" +
    "\050\003\057\004\053\006\054\010\045\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\050\003\057\004\053\006\054\010\045\020" +
    "\060\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\001\002\000\212\002\uff86\003\uff86\004\uff86" +
    "\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\014\uff86\015" +
    "\uff86\017\uff86\020\uff86\021\137\022\141\023\133\024\122" +
    "\025\131\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050" +
    "\130\051\uff86\052\uff86\053\uff86\054\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86\067" +
    "\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86" +
    "\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105" +
    "\uff86\106\uff86\107\uff86\110\uff86\114\uff86\124\uff86\126\uff86" +
    "\001\002\000\212\002\uff7a\003\uff7a\004\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\012\uff7a\014\uff7a\015\uff7a\017\146" +
    "\020\124\021\137\022\141\023\133\024\122\025\131\026" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\130\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\056\uff7a\057\uff7a\060\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\067\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a" +
    "\107\uff7a\110\uff7a\114\uff7a\124\uff7a\126\uff7a\001\002\000" +
    "\212\002\uff76\003\uff76\004\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\014\uff76\015\uff76\017\146\020\124\021" +
    "\137\022\141\023\133\024\122\025\131\026\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036" +
    "\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\145\044\142" +
    "\045\123\046\uff76\047\uff76\050\130\051\uff76\052\uff76\053" +
    "\uff76\054\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76" +
    "\063\uff76\064\uff76\065\uff76\067\uff76\071\uff76\072\uff76\073" +
    "\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76" +
    "\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76\110" +
    "\uff76\114\uff76\124\uff76\126\uff76\001\002\000\212\002\uff7c" +
    "\003\uff7c\004\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012" +
    "\uff7c\014\uff7c\015\uff7c\017\146\020\124\021\137\022\141" +
    "\023\133\024\122\025\131\026\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c" +
    "\040\uff7c\041\uff7c\042\uff7c\043\145\044\142\045\123\046" +
    "\127\047\144\050\130\051\uff7c\052\uff7c\053\uff7c\054\uff7c" +
    "\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\065\uff7c\067\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103" +
    "\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\114\uff7c" +
    "\124\uff7c\126\uff7c\001\002\000\212\002\uff79\003\uff79\004" +
    "\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\014\uff79" +
    "\015\uff79\017\146\020\124\021\137\022\141\023\133\024" +
    "\122\025\131\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79" +
    "\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\130\051\uff79\052\uff79\053\uff79\054\uff79\056\uff79\057" +
    "\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065\uff79" +
    "\067\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076" +
    "\uff79\077\uff79\100\uff79\101\uff79\102\uff79\103\uff79\104\uff79" +
    "\105\uff79\106\uff79\107\uff79\110\uff79\114\uff79\124\uff79\126" +
    "\uff79\001\002\000\212\002\uff83\003\uff83\004\uff83\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\014\uff83\015\uff83\017" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\131" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\130\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\056\uff83\057\uff83\060\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\067\uff83\071" +
    "\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83" +
    "\100\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106" +
    "\uff83\107\uff83\110\uff83\114\uff83\124\uff83\126\uff83\001\002" +
    "\000\212\002\uff7e\003\uff7e\004\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\011\uff7e\012\uff7e\014\uff7e\015\uff7e\017\146\020\124" +
    "\021\137\022\141\023\133\024\122\025\131\026\uff7e\027" +
    "\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\145\044" +
    "\142\045\123\046\127\047\144\050\130\051\uff7e\052\uff7e" +
    "\053\uff7e\054\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\067\uff7e\071\uff7e\072\uff7e" +
    "\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101" +
    "\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e" +
    "\110\uff7e\114\uff7e\124\uff7e\126\uff7e\001\002\000\212\002" +
    "\uff84\003\uff84\004\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\014\uff84\015\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\131\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\130\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84" +
    "\064\uff84\065\uff84\067\uff84\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84" +
    "\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84\114" +
    "\uff84\124\uff84\126\uff84\001\002\000\212\002\uff91\003\uff91" +
    "\004\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\014" +
    "\uff91\015\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\067\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91" +
    "\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\105\uff91\106\uff91\107\uff91\110\uff91\114\uff91\124\uff91" +
    "\126\uff91\001\002\000\212\002\uff7d\003\uff7d\004\uff7d\006" +
    "\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\014\uff7d\015\uff7d" +
    "\017\146\020\124\021\137\022\141\023\133\024\122\025" +
    "\131\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\145\044\142\045\123\046\127\047\144\050\130" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\067\uff7d" +
    "\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077" +
    "\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d" +
    "\106\uff7d\107\uff7d\110\uff7d\114\uff7d\124\uff7d\126\uff7d\001" +
    "\002\000\212\002\uff74\003\uff74\004\uff74\006\uff74\007\uff74" +
    "\010\uff74\011\uff74\012\uff74\014\uff74\015\uff74\017\146\020" +
    "\124\021\137\022\141\023\133\024\122\025\131\026\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\145" +
    "\044\142\045\123\046\127\047\144\050\130\051\uff74\052" +
    "\uff74\053\uff74\054\uff74\056\uff74\057\uff74\060\uff74\061\uff74" +
    "\062\uff74\063\uff74\064\uff74\065\uff74\067\uff74\071\uff74\072" +
    "\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74" +
    "\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107" +
    "\uff74\110\uff74\114\uff74\124\uff74\126\uff74\001\002\000\212" +
    "\002\uff82\003\uff82\004\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\014\uff82\015\uff82\017\uff82\020\uff82\021\uff82" +
    "\022\uff82\023\uff82\024\uff82\025\131\026\uff82\027\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\130\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\064\uff82\065\uff82\067\uff82\071\uff82\072\uff82\073\uff82" +
    "\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102" +
    "\uff82\103\uff82\104\uff82\105\uff82\106\uff82\107\uff82\110\uff82" +
    "\114\uff82\124\uff82\126\uff82\001\002\000\212\002\uff7f\003" +
    "\uff7f\004\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\014\uff7f\015\uff7f\017\146\020\124\021\137\022\141\023" +
    "\133\024\122\025\131\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040" +
    "\uff7f\041\uff7f\042\uff7f\043\145\044\142\045\123\046\127" +
    "\047\144\050\130\051\uff7f\052\uff7f\053\uff7f\054\uff7f\056" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f" +
    "\065\uff7f\067\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075" +
    "\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f" +
    "\104\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\114\uff7f\124" +
    "\uff7f\126\uff7f\001\002\000\212\002\uff80\003\uff80\004\uff80" +
    "\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\014\uff80\015" +
    "\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\056\uff80\057\uff80" +
    "\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80\067" +
    "\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80" +
    "\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105" +
    "\uff80\106\uff80\107\uff80\110\uff80\114\uff80\124\uff80\126\uff80" +
    "\001\002\000\212\002\uff75\003\uff75\004\uff75\006\uff75\007" +
    "\uff75\010\uff75\011\uff75\012\uff75\014\uff75\015\uff75\017\uff75" +
    "\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\131\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75" +
    "\052\uff75\053\uff75\054\uff75\056\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\063\uff75\064\uff75\065\uff75\067\uff75\071\uff75" +
    "\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100" +
    "\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75" +
    "\107\uff75\110\uff75\114\uff75\124\uff75\126\uff75\001\002\000" +
    "\212\002\uff77\003\uff77\004\uff77\006\uff77\007\uff77\010\uff77" +
    "\011\uff77\012\uff77\014\uff77\015\uff77\017\146\020\124\021" +
    "\137\022\141\023\133\024\122\025\131\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\145\044\142" +
    "\045\123\046\uff77\047\144\050\130\051\uff77\052\uff77\053" +
    "\uff77\054\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\063\uff77\064\uff77\065\uff77\067\uff77\071\uff77\072\uff77\073" +
    "\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77\101\uff77" +
    "\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77\107\uff77\110" +
    "\uff77\114\uff77\124\uff77\126\uff77\001\002\000\212\002\uff7b" +
    "\003\uff7b\004\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\014\uff7b\015\uff7b\017\146\020\124\021\137\022\141" +
    "\023\133\024\122\025\131\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\145\044\142\045\123\046" +
    "\127\047\144\050\130\051\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064" +
    "\uff7b\065\uff7b\067\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b\114\uff7b" +
    "\124\uff7b\126\uff7b\001\002\000\212\002\uff73\003\uff73\004" +
    "\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73\014\uff73" +
    "\015\uff73\017\146\020\124\021\137\022\141\023\133\024" +
    "\122\025\131\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\uff73\043\145\044\142\045\123\046\127\047\144" +
    "\050\130\051\uff73\052\uff73\053\uff73\054\uff73\056\uff73\057" +
    "\uff73\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065\uff73" +
    "\067\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73\076" +
    "\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73" +
    "\105\uff73\106\uff73\107\uff73\110\uff73\114\uff73\124\uff73\126" +
    "\uff73\001\002\000\212\002\uff85\003\uff85\004\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\014\uff85\015\uff85\017" +
    "\uff85\020\uff85\021\137\022\141\023\133\024\122\025\131" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\130\051" +
    "\uff85\052\uff85\053\uff85\054\uff85\056\uff85\057\uff85\060\uff85" +
    "\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\067\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106" +
    "\uff85\107\uff85\110\uff85\114\uff85\124\uff85\126\uff85\001\002" +
    "\000\212\002\uff78\003\uff78\004\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\014\uff78\015\uff78\017\146\020\124" +
    "\021\137\022\141\023\133\024\122\025\131\026\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\145\044" +
    "\142\045\uff78\046\uff78\047\uff78\050\130\051\uff78\052\uff78" +
    "\053\uff78\054\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062" +
    "\uff78\063\uff78\064\uff78\065\uff78\067\uff78\071\uff78\072\uff78" +
    "\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101" +
    "\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78\107\uff78" +
    "\110\uff78\114\uff78\124\uff78\126\uff78\001\002\000\212\002" +
    "\uff81\003\uff81\004\uff81\006\uff81\007\uff81\010\uff81\011\uff81" +
    "\012\uff81\014\uff81\015\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\023\uff81\024\uff81\025\131\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037" +
    "\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\130\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81" +
    "\064\uff81\065\uff81\067\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81" +
    "\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\110\uff81\114" +
    "\uff81\124\uff81\126\uff81\001\002\000\050\003\105\004\053" +
    "\006\054\010\045\020\060\067\040\073\077\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\001\002\000\212\002" +
    "\uff47\003\uff47\004\uff47\006\uff47\007\uff47\010\uff47\011\uff47" +
    "\012\uff47\014\uff47\015\uff47\017\uff47\020\uff47\021\uff47\022" +
    "\uff47\023\uff47\024\uff47\025\uff47\026\uff47\027\uff47\030\uff47" +
    "\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47\037" +
    "\uff47\040\uff47\041\uff47\042\uff47\043\uff47\044\uff47\045\uff47" +
    "\046\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054" +
    "\uff47\056\uff47\057\uff47\060\uff47\061\uff47\062\uff47\063\uff47" +
    "\064\uff47\065\uff47\067\uff47\071\uff47\072\uff47\073\uff47\074" +
    "\uff47\075\uff47\076\uff47\077\uff47\100\uff47\101\uff47\102\uff47" +
    "\103\uff47\104\uff47\105\uff47\106\uff47\107\uff47\110\uff47\114" +
    "\uff47\124\uff47\126\uff47\001\002\000\212\002\uff46\003\uff46" +
    "\004\uff46\006\uff46\007\uff46\010\uff46\011\uff46\012\uff46\014" +
    "\uff46\015\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46" +
    "\024\uff46\025\uff46\026\uff46\027\uff46\030\uff46\031\uff46\032" +
    "\uff46\033\uff46\034\uff46\035\uff46\036\uff46\037\uff46\040\uff46" +
    "\041\uff46\042\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047" +
    "\uff46\050\uff46\051\uff46\052\uff46\053\uff46\054\uff46\056\uff46" +
    "\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46\064\uff46\065" +
    "\uff46\067\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075\uff46" +
    "\076\uff46\077\uff46\100\uff46\101\uff46\102\uff46\103\uff46\104" +
    "\uff46\105\uff46\106\uff46\107\uff46\110\uff46\114\uff46\124\uff46" +
    "\126\uff46\001\002\000\052\003\105\004\053\006\054\007" +
    "\200\010\045\020\060\067\040\073\077\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\212\002\uff4e" +
    "\003\uff4e\004\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012" +
    "\uff4e\014\uff4e\015\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031" +
    "\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e" +
    "\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064" +
    "\uff4e\065\uff4e\067\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e" +
    "\075\uff4e\076\uff4e\077\uff4e\100\uff4e\101\uff4e\102\uff4e\103" +
    "\uff4e\104\uff4e\105\uff4e\106\uff4e\107\uff4e\110\uff4e\114\uff4e" +
    "\124\uff4e\126\uff4e\001\002\000\212\002\uff4f\003\uff4f\004" +
    "\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f\014\uff4f" +
    "\015\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024" +
    "\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f" +
    "\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041" +
    "\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f" +
    "\050\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\056\uff4f\057" +
    "\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f" +
    "\067\uff4f\071\uff4f\072\uff4f\073\uff4f\074\uff4f\075\uff4f\076" +
    "\uff4f\077\uff4f\100\uff4f\101\uff4f\102\uff4f\103\uff4f\104\uff4f" +
    "\105\uff4f\106\uff4f\107\uff4f\110\uff4f\114\uff4f\124\uff4f\126" +
    "\uff4f\001\002\000\006\002\uffe3\126\uffe3\001\002\000\004" +
    "\014\254\001\002\000\100\017\146\020\124\021\137\022" +
    "\141\023\133\024\122\025\131\026\115\027\233\030\237" +
    "\031\234\032\240\033\231\034\112\035\107\036\113\037" +
    "\111\040\117\041\116\042\114\043\145\044\142\045\123" +
    "\046\127\047\144\050\130\051\235\052\227\053\226\071" +
    "\232\072\230\001\002\000\050\003\057\004\053\006\205" +
    "\010\045\020\060\067\040\073\077\077\014\100\021\101" +
    "\024\102\020\103\015\104\023\105\061\106\044\107\067" +
    "\110\062\114\051\124\100\001\002\000\204\002\uffe0\003" +
    "\057\004\053\006\054\010\045\014\210\015\uffe0\017\uff6f" +
    "\020\060\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026" +
    "\115\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\112" +
    "\035\107\036\113\037\111\040\117\041\116\042\114\043" +
    "\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\052\uff6f\053\uff6f\054\uffe0\056\uffe0\057\010\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\041\065\052\067\040\071\uff6f" +
    "\072\uff6f\073\077\074\056\075\063\076\073\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\126\uffe0\001\002\000" +
    "\104\007\uff94\014\uff94\017\uff70\020\uff70\021\uff70\022\uff70" +
    "\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031" +
    "\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70" +
    "\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\071\uff70" +
    "\072\uff70\001\002\000\106\002\uffe0\003\057\004\053\006" +
    "\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0\057\010" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065\052\067" +
    "\040\073\077\074\056\075\063\076\073\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\126\uffe0\001\002\000\106" +
    "\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020" +
    "\uff33\054\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075" +
    "\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124" +
    "\uff33\126\uff33\001\002\000\106\002\uffe0\003\057\004\053" +
    "\006\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0\057" +
    "\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065\052" +
    "\067\040\073\077\074\056\075\063\076\073\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\126\uffe0\001\002\000" +
    "\106\002\uffe1\003\uffe1\004\uffe1\006\uffe1\010\uffe1\015\uffe1" +
    "\020\uffe1\054\214\056\215\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\067\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103" +
    "\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\114\uffe1" +
    "\124\uffe1\126\uffe1\001\002\000\106\002\uffe0\003\057\004" +
    "\053\006\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0" +
    "\057\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065" +
    "\052\067\040\073\077\074\056\075\063\076\073\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\126\uffe0\001\002" +
    "\000\106\002\uffe0\003\057\004\053\006\054\010\045\015" +
    "\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\041\065\052\067\040\073\077\074" +
    "\056\075\063\076\073\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\126\uffe0\001\002\000\106\002\uffde\003\uffde" +
    "\004\uffde\006\uffde\010\uffde\015\uffde\020\uffde\054\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\067\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077" +
    "\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde" +
    "\106\uffde\107\uffde\110\uffde\114\uffde\124\uffde\126\uffde\001" +
    "\002\000\106\002\uffdf\003\uffdf\004\uffdf\006\uffdf\010\uffdf" +
    "\015\uffdf\020\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\067\uffdf\073\uffdf" +
    "\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\102" +
    "\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf" +
    "\114\uffdf\124\uffdf\126\uffdf\001\002\000\106\002\uff34\003" +
    "\uff34\004\uff34\006\uff34\010\uff34\015\uff34\020\uff34\054\uff34" +
    "\056\uff34\057\uff34\060\uff34\061\uff34\062\uff34\063\uff34\064" +
    "\uff34\065\uff34\067\uff34\073\uff34\074\uff34\075\uff34\076\uff34" +
    "\077\uff34\100\uff34\101\uff34\102\uff34\103\uff34\104\uff34\105" +
    "\uff34\106\uff34\107\uff34\110\uff34\114\uff34\124\uff34\126\uff34" +
    "\001\002\000\106\002\uffaf\003\uffaf\004\uffaf\006\uffaf\010" +
    "\uffaf\015\uffaf\020\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\067\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110" +
    "\uffaf\114\uffaf\124\uffaf\126\uffaf\001\002\000\106\002\uff33" +
    "\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054" +
    "\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33" +
    "\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076" +
    "\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33" +
    "\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126" +
    "\uff33\001\002\000\106\002\uffb0\003\uffb0\004\uffb0\006\uffb0" +
    "\010\uffb0\015\uffb0\020\uffb0\054\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\067\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\114\uffb0\124\uffb0\126\uffb0\001\002\000\004\007" +
    "\253\001\002\000\102\007\236\017\146\020\124\021\137" +
    "\022\141\023\133\024\122\025\131\026\115\027\233\030" +
    "\237\031\234\032\240\033\231\034\112\035\107\036\113" +
    "\037\111\040\117\041\116\042\114\043\145\044\142\045" +
    "\123\046\127\047\144\050\130\051\235\052\227\053\226" +
    "\071\232\072\230\001\002\000\050\003\057\004\053\006" +
    "\054\010\045\020\060\067\040\073\077\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\050\003\057" +
    "\004\053\006\054\010\045\020\060\067\040\073\077\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\061" +
    "\106\044\107\067\110\062\114\051\124\100\001\002\000" +
    "\050\003\057\004\053\006\054\010\045\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\050\003\057\004\053\006\054\010\045\020" +
    "\060\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\001\002\000\050\003\057\004\053\006\054" +
    "\010\045\020\060\067\040\073\077\077\014\100\021\101" +
    "\024\102\020\103\015\104\023\105\061\106\044\107\067" +
    "\110\062\114\051\124\100\001\002\000\050\003\057\004" +
    "\053\006\054\010\045\020\060\067\040\073\077\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\001\002\000\050" +
    "\003\057\004\053\006\054\010\045\020\060\067\040\073" +
    "\077\077\014\100\021\101\024\102\020\103\015\104\023" +
    "\105\061\106\044\107\067\110\062\114\051\124\100\001" +
    "\002\000\050\003\057\004\053\006\054\010\045\020\060" +
    "\067\040\073\077\077\014\100\021\101\024\102\020\103" +
    "\015\104\023\105\061\106\044\107\067\110\062\114\051" +
    "\124\100\001\002\000\104\007\uff96\014\uff96\017\uff72\020" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\053\uff72\071\uff72\072\uff72\001\002\000\050\003\057" +
    "\004\053\006\054\010\045\020\060\067\040\073\077\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\061" +
    "\106\044\107\067\110\062\114\051\124\100\001\002\000" +
    "\050\003\057\004\053\006\054\010\045\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\104\007\uff9a\014\uff9a\017\146\020\124\021" +
    "\137\022\141\023\133\024\122\025\131\026\uff7c\027\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\145\044\142" +
    "\045\123\046\127\047\144\050\130\051\uff7c\052\uff7c\053" +
    "\uff7c\071\uff7c\072\uff7c\001\002\000\104\007\uff9c\014\uff9c" +
    "\017\146\020\124\021\137\022\141\023\133\024\122\025" +
    "\131\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e" +
    "\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042" +
    "\uff7e\043\145\044\142\045\123\046\127\047\144\050\130" +
    "\051\uff7e\052\uff7e\053\uff7e\071\uff7e\072\uff7e\001\002\000" +
    "\104\007\uff98\014\uff98\017\146\020\124\021\137\022\141" +
    "\023\133\024\122\025\131\026\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\145\044\142\045\123\046" +
    "\127\047\144\050\130\051\uff74\052\uff74\053\uff74\071\uff74" +
    "\072\uff74\001\002\000\104\007\uff9b\014\uff9b\017\146\020" +
    "\124\021\137\022\141\023\133\024\122\025\131\026\uff7d" +
    "\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\145" +
    "\044\142\045\123\046\127\047\144\050\130\051\uff7d\052" +
    "\uff7d\053\uff7d\071\uff7d\072\uff7d\001\002\000\104\007\uffa0" +
    "\014\uffa0\017\146\020\124\021\137\022\141\023\133\024" +
    "\122\025\131\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\145\044\142\045\123\046\127\047\144" +
    "\050\130\051\uff7f\052\uff7f\053\uff7f\071\uff7f\072\uff7f\001" +
    "\002\000\076\007\uff9d\014\uff9d\017\146\020\124\021\137" +
    "\022\141\023\133\024\122\025\131\026\115\027\132\030" +
    "\140\031\135\032\143\033\126\034\112\035\107\036\113" +
    "\037\111\040\117\041\116\042\114\043\145\044\142\045" +
    "\123\046\127\047\144\050\130\051\134\052\125\001\002" +
    "\000\104\007\uff99\014\uff99\017\146\020\124\021\137\022" +
    "\141\023\133\024\122\025\131\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\145\044\142\045\123" +
    "\046\127\047\144\050\130\051\uff7b\052\uff7b\053\uff7b\071" +
    "\uff7b\072\uff7b\001\002\000\076\007\uff9e\014\uff9e\017\146" +
    "\020\124\021\137\022\141\023\133\024\122\025\131\026" +
    "\115\027\132\030\140\031\135\032\143\033\126\034\112" +
    "\035\107\036\113\037\111\040\117\041\116\042\114\043" +
    "\145\044\142\045\123\046\127\047\144\050\130\051\134" +
    "\052\125\001\002\000\104\007\uff97\014\uff97\017\146\020" +
    "\124\021\137\022\141\023\133\024\122\025\131\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\145" +
    "\044\142\045\123\046\127\047\144\050\130\051\uff73\052" +
    "\uff73\053\uff73\071\uff73\072\uff73\001\002\000\076\007\uff9f" +
    "\014\uff9f\017\146\020\124\021\137\022\141\023\133\024" +
    "\122\025\131\026\115\027\132\030\140\031\135\032\143" +
    "\033\126\034\112\035\107\036\113\037\111\040\117\041" +
    "\116\042\114\043\145\044\142\045\123\046\127\047\144" +
    "\050\130\051\134\052\125\001\002\000\104\007\uff95\014" +
    "\uff95\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033" +
    "\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71" +
    "\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050" +
    "\uff71\051\uff71\052\uff71\053\uff71\071\uff71\072\uff71\001\002" +
    "\000\106\002\uffe0\003\057\004\053\006\054\010\045\015" +
    "\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\041\065\052\067\040\073\077\074" +
    "\056\075\063\076\073\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\126\uffe0\001\002\000\106\002\uff33\003\uff33" +
    "\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054\214\056" +
    "\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33" +
    "\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077" +
    "\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33" +
    "\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33\001" +
    "\002\000\106\002\uffb1\003\uffb1\004\uffb1\006\uffb1\010\uffb1" +
    "\015\uffb1\020\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\067\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\114\uffb1\124\uffb1\126\uffb1\001\002\000\004\004\260\001" +
    "\002\000\004\006\261\001\002\000\052\003\105\004\053" +
    "\006\054\007\262\010\045\020\060\067\040\073\077\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\061" +
    "\106\044\107\067\110\062\114\051\124\100\001\002\000" +
    "\212\002\uff4a\003\uff4a\004\uff4a\006\uff4a\007\uff4a\010\uff4a" +
    "\011\uff4a\012\uff4a\014\uff4a\015\uff4a\017\uff4a\020\uff4a\021" +
    "\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a" +
    "\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036" +
    "\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044\uff4a" +
    "\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053" +
    "\uff4a\054\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062\uff4a" +
    "\063\uff4a\064\uff4a\065\uff4a\067\uff4a\071\uff4a\072\uff4a\073" +
    "\uff4a\074\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101\uff4a" +
    "\102\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a\107\uff4a\110" +
    "\uff4a\114\uff4a\124\uff4a\126\uff4a\001\002\000\212\002\uff4b" +
    "\003\uff4b\004\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012" +
    "\uff4b\014\uff4b\015\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b" +
    "\023\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046" +
    "\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b" +
    "\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\064" +
    "\uff4b\065\uff4b\067\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b" +
    "\075\uff4b\076\uff4b\077\uff4b\100\uff4b\101\uff4b\102\uff4b\103" +
    "\uff4b\104\uff4b\105\uff4b\106\uff4b\107\uff4b\110\uff4b\114\uff4b" +
    "\124\uff4b\126\uff4b\001\002\000\106\002\uffe0\003\057\004" +
    "\053\006\054\010\045\015\220\020\060\054\uffe0\056\uffe0" +
    "\057\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065" +
    "\052\067\040\073\077\074\056\075\063\076\073\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\126\uffe0\001\002" +
    "\000\106\002\uffe0\003\057\004\053\006\054\010\045\015" +
    "\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\041\065\052\067\040\073\077\074" +
    "\056\075\063\076\073\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\126\uffe0\001\002\000\106\002\uff33\003\uff33" +
    "\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054\214\056" +
    "\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33" +
    "\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077" +
    "\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33" +
    "\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33\001" +
    "\002\000\106\002\uffb3\003\uffb3\004\uffb3\006\uffb3\010\uffb3" +
    "\015\uffb3\020\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\270\063\271\064\uffb3\065\uffb3\067\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3" +
    "\114\uffb3\124\uffb3\126\uffb3\001\002\000\010\003\302\004" +
    "\301\014\303\001\002\000\006\003\275\014\276\001\002" +
    "\000\106\002\uffba\003\uffba\004\uffba\006\uffba\010\uffba\015" +
    "\uffba\020\uffba\054\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\067\uffba\073\uffba\074" +
    "\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba" +
    "\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\114" +
    "\uffba\124\uffba\126\uffba\001\002\000\106\002\uffb3\003\uffb3" +
    "\004\uffb3\006\uffb3\010\uffb3\015\uffb3\020\uffb3\054\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\271\064\uffb3" +
    "\065\uffb3\067\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3" +
    "\106\uffb3\107\uffb3\110\uffb3\114\uffb3\124\uffb3\126\uffb3\001" +
    "\002\000\106\002\uffbf\003\uffbf\004\uffbf\006\uffbf\010\uffbf" +
    "\015\uffbf\020\uffbf\054\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf" +
    "\114\uffbf\124\uffbf\126\uffbf\001\002\000\106\002\uffb2\003" +
    "\uffb2\004\uffb2\006\uffb2\010\uffb2\015\uffb2\020\uffb2\054\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\067\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105" +
    "\uffb2\106\uffb2\107\uffb2\110\uffb2\114\uffb2\124\uffb2\126\uffb2" +
    "\001\002\000\106\002\uffe0\003\057\004\053\006\054\010" +
    "\045\015\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\041\065\052\067\040\073" +
    "\077\074\056\075\063\076\073\077\014\100\021\101\024" +
    "\102\020\103\015\104\023\105\061\106\044\107\067\110" +
    "\062\114\051\124\100\126\uffe0\001\002\000\106\002\uff33" +
    "\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054" +
    "\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33" +
    "\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076" +
    "\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33" +
    "\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126" +
    "\uff33\001\002\000\106\002\uffb4\003\uffb4\004\uffb4\006\uffb4" +
    "\010\uffb4\015\uffb4\020\uffb4\054\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\114\uffb4\124\uffb4\126\uffb4\001\002\000\006\003" +
    "\312\014\313\001\002\000\110\002\uff33\003\uff33\004\uff33" +
    "\006\uff33\010\uff33\014\306\015\220\020\uff33\054\uff33\056" +
    "\uff33\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33" +
    "\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077" +
    "\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33" +
    "\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33\001" +
    "\002\000\106\002\uffe0\003\057\004\053\006\054\010\045" +
    "\015\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\041\065\052\067\040\073\077" +
    "\074\056\075\063\076\073\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\126\uffe0\001\002\000\106\002\uff33\003" +
    "\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054\214" +
    "\056\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064" +
    "\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33" +
    "\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105" +
    "\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33" +
    "\001\002\000\106\002\uffb8\003\uffb8\004\uffb8\006\uffb8\010" +
    "\uffb8\015\uffb8\020\uffb8\054\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110" +
    "\uffb8\114\uffb8\124\uffb8\126\uffb8\001\002\000\106\002\uffe0" +
    "\003\057\004\053\006\054\010\045\015\uffe0\020\060\054" +
    "\uffe0\056\uffe0\057\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\041\065\052\067\040\073\077\074\056\075\063\076" +
    "\073\077\014\100\021\101\024\102\020\103\015\104\023" +
    "\105\061\106\044\107\067\110\062\114\051\124\100\126" +
    "\uffe0\001\002\000\106\002\uffb5\003\uffb5\004\uffb5\006\uffb5" +
    "\010\uffb5\015\uffb5\020\uffb5\054\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101" +
    "\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5" +
    "\110\uffb5\114\uffb5\124\uffb5\126\uffb5\001\002\000\106\002" +
    "\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33" +
    "\054\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33\063" +
    "\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33" +
    "\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104" +
    "\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33" +
    "\126\uff33\001\002\000\106\002\uffb7\003\uffb7\004\uffb7\006" +
    "\uffb7\010\uffb7\015\uffb7\020\uffb7\054\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107" +
    "\uffb7\110\uffb7\114\uffb7\124\uffb7\126\uffb7\001\002\000\106" +
    "\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020" +
    "\uff33\054\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075" +
    "\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124" +
    "\uff33\126\uff33\001\002\000\106\002\uffe0\003\057\004\053" +
    "\006\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0\057" +
    "\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065\052" +
    "\067\040\073\077\074\056\075\063\076\073\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\126\uffe0\001\002\000" +
    "\106\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220" +
    "\020\uff33\054\214\056\215\057\uff33\060\uff33\061\uff33\062" +
    "\uff33\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33" +
    "\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103" +
    "\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33" +
    "\124\uff33\126\uff33\001\002\000\106\002\uffb9\003\uffb9\004" +
    "\uffb9\006\uffb9\010\uffb9\015\uffb9\020\uffb9\054\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\067\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106" +
    "\uffb9\107\uffb9\110\uffb9\114\uffb9\124\uffb9\126\uffb9\001\002" +
    "\000\106\002\uffb6\003\uffb6\004\uffb6\006\uffb6\010\uffb6\015" +
    "\uffb6\020\uffb6\054\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\114" +
    "\uffb6\124\uffb6\126\uffb6\001\002\000\106\002\uffbd\003\uffbd" +
    "\004\uffbd\006\uffbd\010\uffbd\015\uffbd\020\uffbd\054\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\067\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\107\uffbd\110\uffbd\114\uffbd\124\uffbd\126\uffbd\001" +
    "\002\000\106\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33" +
    "\015\220\020\uff33\054\214\056\215\057\uff33\060\uff33\061" +
    "\uff33\062\uff33\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33" +
    "\074\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102" +
    "\uff33\103\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33" +
    "\114\uff33\124\uff33\126\uff33\001\002\000\106\002\uffb3\003" +
    "\uffb3\004\uffb3\006\uffb3\010\uffb3\015\uffb3\020\uffb3\054\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\270\063\271\064" +
    "\uffb3\065\uffb3\067\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\106\uffb3\107\uffb3\110\uffb3\114\uffb3\124\uffb3\126\uffb3" +
    "\001\002\000\106\002\uffbb\003\uffbb\004\uffbb\006\uffbb\010" +
    "\uffbb\015\uffbb\020\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\073" +
    "\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\114\uffbb\124\uffbb\126\uffbb\001\002\000\106\002\uffb3" +
    "\003\uffb3\004\uffb3\006\uffb3\010\uffb3\015\uffb3\020\uffb3\054" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\271" +
    "\064\uffb3\065\uffb3\067\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3" +
    "\105\uffb3\106\uffb3\107\uffb3\110\uffb3\114\uffb3\124\uffb3\126" +
    "\uffb3\001\002\000\106\002\uffbc\003\uffbc\004\uffbc\006\uffbc" +
    "\010\uffbc\015\uffbc\020\uffbc\054\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\067\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc" +
    "\110\uffbc\114\uffbc\124\uffbc\126\uffbc\001\002\000\212\002" +
    "\uff6e\003\uff6e\004\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\014\uff6e\015\uff6e\017\uff6e\020\uff6e\021\uff6e\022" +
    "\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e" +
    "\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054" +
    "\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e" +
    "\064\uff6e\065\uff6e\067\uff6e\071\uff6e\072\uff6e\073\uff6e\074" +
    "\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e" +
    "\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e\114" +
    "\uff6e\124\uff6e\126\uff6e\001\002\000\174\002\uffd5\003\uffd5" +
    "\004\uffd5\006\uffd5\010\uffd5\015\uffd5\017\146\020\124\021" +
    "\137\022\141\023\133\024\122\025\131\026\115\027\132" +
    "\030\140\031\135\032\143\033\126\034\112\035\107\036" +
    "\113\037\111\040\117\041\116\042\114\043\145\044\142" +
    "\045\123\046\127\047\144\050\130\051\134\052\125\054" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\067\uffd5\073\uffd5\074\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5" +
    "\105\uffd5\106\uffd5\107\uffd5\110\uffd5\114\uffd5\124\uffd5\126" +
    "\uffd5\001\002\000\004\002\ufff7\001\002\000\004\007\333" +
    "\001\002\000\102\007\332\017\146\020\124\021\137\022" +
    "\141\023\133\024\122\025\131\026\115\027\233\030\237" +
    "\031\234\032\240\033\231\034\112\035\107\036\113\037" +
    "\111\040\117\041\116\042\114\043\145\044\142\045\123" +
    "\046\127\047\144\050\130\051\235\052\227\053\226\071" +
    "\232\072\230\001\002\000\212\002\uff72\003\uff72\004\uff72" +
    "\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72\014\uff72\015" +
    "\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72" +
    "\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057\uff72" +
    "\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065\uff72\067" +
    "\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72" +
    "\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105" +
    "\uff72\106\uff72\107\uff72\110\uff72\114\uff72\124\uff72\126\uff72" +
    "\001\002\000\212\002\uff71\003\uff71\004\uff71\006\uff71\007" +
    "\uff71\010\uff71\011\uff71\012\uff71\014\uff71\015\uff71\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026" +
    "\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71" +
    "\052\uff71\053\uff71\054\uff71\056\uff71\057\uff71\060\uff71\061" +
    "\uff71\062\uff71\063\uff71\064\uff71\065\uff71\067\uff71\071\uff71" +
    "\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100" +
    "\uff71\101\uff71\102\uff71\103\uff71\104\uff71\105\uff71\106\uff71" +
    "\107\uff71\110\uff71\114\uff71\124\uff71\126\uff71\001\002\000" +
    "\212\002\uff5d\003\uff5d\004\uff5d\006\uff5d\007\uff5d\010\uff5d" +
    "\011\uff5d\012\uff5d\014\uff5d\015\uff5d\017\uff5d\020\uff5d\021" +
    "\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d" +
    "\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036" +
    "\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d" +
    "\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053" +
    "\uff5d\054\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d" +
    "\063\uff5d\064\uff5d\065\uff5d\067\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\110" +
    "\uff5d\114\uff5d\124\uff5d\126\uff5d\001\002\000\004\004\357" +
    "\001\002\000\052\003\057\004\053\006\054\010\045\014" +
    "\347\020\060\067\040\073\077\077\014\100\021\101\024" +
    "\102\020\103\015\104\023\105\061\106\044\107\067\110" +
    "\062\114\051\124\100\001\002\000\050\003\057\004\053" +
    "\006\054\010\045\020\060\067\040\073\077\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\001\002\000\052\003" +
    "\105\004\053\006\054\007\344\010\045\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\212\002\uff59\003\uff59\004\uff59\006\uff59\007" +
    "\uff59\010\336\011\uff59\012\uff59\014\uff59\015\uff59\017\uff59" +
    "\020\uff59\021\uff59\022\uff59\023\uff59\024\uff59\025\uff59\026" +
    "\uff59\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59\034\uff59" +
    "\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043" +
    "\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\052\uff59\053\uff59\054\uff59\056\uff59\057\uff59\060\uff59\061" +
    "\uff59\062\uff59\063\uff59\064\uff59\065\uff59\067\uff59\071\uff59" +
    "\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100" +
    "\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59" +
    "\107\uff59\110\uff59\114\uff59\124\uff59\126\uff59\001\002\000" +
    "\212\002\uff5c\003\uff5c\004\uff5c\006\uff5c\007\uff5c\010\uff5c" +
    "\011\uff5c\012\uff5c\014\uff5c\015\uff5c\017\uff5c\020\uff5c\021" +
    "\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c" +
    "\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036" +
    "\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c" +
    "\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\056\uff5c\057\uff5c\060\uff5c\061\uff5c\062\uff5c" +
    "\063\uff5c\064\uff5c\065\uff5c\067\uff5c\071\uff5c\072\uff5c\073" +
    "\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c" +
    "\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c\110" +
    "\uff5c\114\uff5c\124\uff5c\126\uff5c\001\002\000\212\002\uff5a" +
    "\003\uff5a\004\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a\012" +
    "\uff5a\014\uff5a\015\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a" +
    "\023\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031" +
    "\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a" +
    "\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046" +
    "\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a" +
    "\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064" +
    "\uff5a\065\uff5a\067\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a" +
    "\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a\103" +
    "\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\110\uff5a\114\uff5a" +
    "\124\uff5a\126\uff5a\001\002\000\212\002\uff52\003\uff52\004" +
    "\uff52\006\uff52\007\uff52\010\uff52\011\uff52\012\uff52\014\uff52" +
    "\015\uff52\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024" +
    "\uff52\025\uff52\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52" +
    "\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041" +
    "\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52" +
    "\050\uff52\051\uff52\052\uff52\053\uff52\054\uff52\056\uff52\057" +
    "\uff52\060\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52" +
    "\067\uff52\071\uff52\072\uff52\073\uff52\074\uff52\075\uff52\076" +
    "\uff52\077\uff52\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52" +
    "\105\uff52\106\uff52\107\uff52\110\uff52\114\uff52\124\uff52\126" +
    "\uff52\001\002\000\212\002\uff53\003\uff53\004\uff53\006\uff53" +
    "\007\uff53\010\uff53\011\uff53\012\uff53\014\uff53\015\uff53\017" +
    "\uff53\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53" +
    "\026\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034" +
    "\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051" +
    "\uff53\052\uff53\053\uff53\054\uff53\056\uff53\057\uff53\060\uff53" +
    "\061\uff53\062\uff53\063\uff53\064\uff53\065\uff53\067\uff53\071" +
    "\uff53\072\uff53\073\uff53\074\uff53\075\uff53\076\uff53\077\uff53" +
    "\100\uff53\101\uff53\102\uff53\103\uff53\104\uff53\105\uff53\106" +
    "\uff53\107\uff53\110\uff53\114\uff53\124\uff53\126\uff53\001\002" +
    "\000\212\002\uff93\003\uff93\004\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\014\uff93\015\uff93\017\146\020\124" +
    "\021\137\022\141\023\133\024\122\025\131\026\115\027" +
    "\132\030\140\031\135\032\143\033\126\034\112\035\107" +
    "\036\113\037\111\040\117\041\116\042\114\043\145\044" +
    "\142\045\123\046\127\047\144\050\130\051\134\052\125" +
    "\053\uff93\054\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\064\uff93\065\uff93\067\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101" +
    "\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93" +
    "\110\uff93\114\uff93\124\uff93\126\uff93\001\002\000\052\003" +
    "\057\004\053\006\054\010\045\011\uff54\020\060\067\040" +
    "\073\077\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\061\106\044\107\067\110\062\114\051\124\100" +
    "\001\002\000\076\011\uff58\014\354\017\146\020\124\021" +
    "\137\022\141\023\133\024\122\025\131\026\115\027\132" +
    "\030\140\031\135\032\143\033\126\034\112\035\107\036" +
    "\113\037\111\040\117\041\116\042\114\043\145\044\142" +
    "\045\123\046\127\047\144\050\130\051\134\052\125\001" +
    "\002\000\004\011\352\001\002\000\212\002\uff59\003\uff59" +
    "\004\uff59\006\uff59\007\uff59\010\336\011\uff59\012\uff59\014" +
    "\uff59\015\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59" +
    "\024\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032" +
    "\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59" +
    "\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047" +
    "\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\056\uff59" +
    "\057\uff59\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065" +
    "\uff59\067\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59" +
    "\076\uff59\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59\104" +
    "\uff59\105\uff59\106\uff59\107\uff59\110\uff59\114\uff59\124\uff59" +
    "\126\uff59\001\002\000\212\002\uff5b\003\uff5b\004\uff5b\006" +
    "\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\014\uff5b\015\uff5b" +
    "\017\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025" +
    "\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b" +
    "\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b" +
    "\051\uff5b\052\uff5b\053\uff5b\054\uff5b\056\uff5b\057\uff5b\060" +
    "\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b\067\uff5b" +
    "\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077" +
    "\uff5b\100\uff5b\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b" +
    "\106\uff5b\107\uff5b\110\uff5b\114\uff5b\124\uff5b\126\uff5b\001" +
    "\002\000\052\003\057\004\053\006\054\010\045\011\uff56" +
    "\020\060\067\040\073\077\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\001\002\000\074\011\uff55\017\146\020" +
    "\124\021\137\022\141\023\133\024\122\025\131\026\115" +
    "\027\132\030\140\031\135\032\143\033\126\034\112\035" +
    "\107\036\113\037\111\040\117\041\116\042\114\043\145" +
    "\044\142\045\123\046\127\047\144\050\130\051\134\052" +
    "\125\001\002\000\074\011\uff57\017\146\020\124\021\137" +
    "\022\141\023\133\024\122\025\131\026\115\027\132\030" +
    "\140\031\135\032\143\033\126\034\112\035\107\036\113" +
    "\037\111\040\117\041\116\042\114\043\145\044\142\045" +
    "\123\046\127\047\144\050\130\051\134\052\125\001\002" +
    "\000\004\006\360\001\002\000\052\003\105\004\053\006" +
    "\054\007\361\010\045\020\060\067\040\073\077\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\001\002\000\212" +
    "\002\uff48\003\uff48\004\uff48\006\uff48\007\uff48\010\uff48\011" +
    "\uff48\012\uff48\014\uff48\015\uff48\017\uff48\020\uff48\021\uff48" +
    "\022\uff48\023\uff48\024\uff48\025\uff48\026\uff48\027\uff48\030" +
    "\uff48\031\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48" +
    "\037\uff48\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045" +
    "\uff48\046\uff48\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48" +
    "\054\uff48\056\uff48\057\uff48\060\uff48\061\uff48\062\uff48\063" +
    "\uff48\064\uff48\065\uff48\067\uff48\071\uff48\072\uff48\073\uff48" +
    "\074\uff48\075\uff48\076\uff48\077\uff48\100\uff48\101\uff48\102" +
    "\uff48\103\uff48\104\uff48\105\uff48\106\uff48\107\uff48\110\uff48" +
    "\114\uff48\124\uff48\126\uff48\001\002\000\212\002\uff49\003" +
    "\uff49\004\uff49\006\uff49\007\uff49\010\uff49\011\uff49\012\uff49" +
    "\014\uff49\015\uff49\017\uff49\020\uff49\021\uff49\022\uff49\023" +
    "\uff49\024\uff49\025\uff49\026\uff49\027\uff49\030\uff49\031\uff49" +
    "\032\uff49\033\uff49\034\uff49\035\uff49\036\uff49\037\uff49\040" +
    "\uff49\041\uff49\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49" +
    "\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054\uff49\056" +
    "\uff49\057\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49" +
    "\065\uff49\067\uff49\071\uff49\072\uff49\073\uff49\074\uff49\075" +
    "\uff49\076\uff49\077\uff49\100\uff49\101\uff49\102\uff49\103\uff49" +
    "\104\uff49\105\uff49\106\uff49\107\uff49\110\uff49\114\uff49\124" +
    "\uff49\126\uff49\001\002\000\004\014\u010e\001\002\000\204" +
    "\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\014\365\015" +
    "\220\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f" +
    "\025\uff6f\026\115\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033" +
    "\uff6f\034\112\035\107\036\113\037\111\040\117\041\116" +
    "\042\114\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050" +
    "\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff33\056\uff33\057\uff33" +
    "\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065\uff33\067" +
    "\uff33\071\uff6f\072\uff6f\073\uff33\074\uff33\075\uff33\076\uff33" +
    "\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105" +
    "\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33" +
    "\001\002\000\106\002\uffe0\003\057\004\053\006\054\010" +
    "\045\015\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\041\065\052\067\040\073" +
    "\077\074\056\075\063\076\073\077\014\100\021\101\024" +
    "\102\020\103\015\104\023\105\061\106\044\107\067\110" +
    "\062\114\051\124\100\126\uffe0\001\002\000\106\002\uffaa" +
    "\003\uffaa\004\uffaa\006\uffaa\010\uffaa\015\uffaa\020\uffaa\054" +
    "\uffaa\056\uffaa\057\uffaa\060\370\061\367\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\067\uffaa\073\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa" +
    "\105\uffaa\106\uffaa\107\uffaa\110\uffaa\114\uffaa\124\uffaa\126" +
    "\uffaa\001\002\000\006\003\u0106\014\u0107\001\002\000\050" +
    "\003\373\004\053\006\205\010\045\020\060\067\040\073" +
    "\077\077\014\100\021\101\024\102\020\103\015\104\023" +
    "\105\061\106\044\107\067\110\062\114\051\124\100\001" +
    "\002\000\106\002\uffa9\003\uffa9\004\uffa9\006\uffa9\010\uffa9" +
    "\015\uffa9\020\uffa9\054\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\067\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102" +
    "\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9" +
    "\114\uffa9\124\uffa9\126\uffa9\001\002\000\004\014\u0102\001" +
    "\002\000\204\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33" +
    "\014\374\015\220\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\026\115\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\112\035\107\036\113\037\111\040" +
    "\117\041\116\042\114\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff33\056" +
    "\uff33\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33" +
    "\065\uff33\067\uff33\071\uff6f\072\uff6f\073\uff33\074\uff33\075" +
    "\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124" +
    "\uff33\126\uff33\001\002\000\106\002\uffe0\003\057\004\053" +
    "\006\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0\057" +
    "\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065\052" +
    "\067\040\073\077\074\056\075\063\076\073\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\105\061\106\044" +
    "\107\067\110\062\114\051\124\100\126\uffe0\001\002\000" +
    "\106\002\uffa2\003\uffa2\004\uffa2\006\uffa2\010\uffa2\015\uffa2" +
    "\020\uffa2\054\uffa2\056\uffa2\057\uffa2\060\370\061\367\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\067\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\114\uffa2" +
    "\124\uffa2\126\uffa2\001\002\000\106\002\uffa5\003\uffa5\004" +
    "\uffa5\006\uffa5\010\uffa5\015\uffa5\020\uffa5\054\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065" +
    "\uffa5\067\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106" +
    "\uffa5\107\uffa5\110\uffa5\114\uffa5\124\uffa5\126\uffa5\001\002" +
    "\000\106\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015" +
    "\220\020\uff33\054\214\056\215\057\uff33\060\uff33\061\uff33" +
    "\062\uff33\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074" +
    "\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33" +
    "\103\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114" +
    "\uff33\124\uff33\126\uff33\001\002\000\106\002\uffa3\003\uffa3" +
    "\004\uffa3\006\uffa3\010\uffa3\015\uffa3\020\uffa3\054\uffa3\056" +
    "\uffa3\057\uffa3\060\370\061\367\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\067\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077" +
    "\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\106\uffa3\107\uffa3\110\uffa3\114\uffa3\124\uffa3\126\uffa3\001" +
    "\002\000\106\002\uffa6\003\uffa6\004\uffa6\006\uffa6\010\uffa6" +
    "\015\uffa6\020\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\067\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102" +
    "\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\114\uffa6\124\uffa6\126\uffa6\001\002\000\106\002\uffe0\003" +
    "\057\004\053\006\054\010\045\015\uffe0\020\060\054\uffe0" +
    "\056\uffe0\057\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\041\065\052\067\040\073\077\074\056\075\063\076\073" +
    "\077\014\100\021\101\024\102\020\103\015\104\023\105" +
    "\061\106\044\107\067\110\062\114\051\124\100\126\uffe0" +
    "\001\002\000\106\002\uff33\003\uff33\004\uff33\006\uff33\010" +
    "\uff33\015\220\020\uff33\054\214\056\215\057\uff33\060\uff33" +
    "\061\uff33\062\uff33\063\uff33\064\uff33\065\uff33\067\uff33\073" +
    "\uff33\074\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33" +
    "\102\uff33\103\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110" +
    "\uff33\114\uff33\124\uff33\126\uff33\001\002\000\106\002\uffa1" +
    "\003\uffa1\004\uffa1\006\uffa1\010\uffa1\015\uffa1\020\uffa1\054" +
    "\uffa1\056\uffa1\057\uffa1\060\370\061\367\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\067\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1" +
    "\105\uffa1\106\uffa1\107\uffa1\110\uffa1\114\uffa1\124\uffa1\126" +
    "\uffa1\001\002\000\106\002\uffa8\003\uffa8\004\uffa8\006\uffa8" +
    "\010\uffa8\015\uffa8\020\uffa8\054\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\067\uffa8" +
    "\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8" +
    "\110\uffa8\114\uffa8\124\uffa8\126\uffa8\001\002\000\106\002" +
    "\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33" +
    "\054\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33\063" +
    "\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33" +
    "\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104" +
    "\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33" +
    "\126\uff33\001\002\000\106\002\uffe0\003\057\004\053\006" +
    "\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0\057\010" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065\052\067" +
    "\040\073\077\074\056\075\063\076\073\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\126\uffe0\001\002\000\106" +
    "\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020" +
    "\uff33\054\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075" +
    "\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124" +
    "\uff33\126\uff33\001\002\000\106\002\uffa7\003\uffa7\004\uffa7" +
    "\006\uffa7\010\uffa7\015\uffa7\020\uffa7\054\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\067\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100" +
    "\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7" +
    "\107\uffa7\110\uffa7\114\uffa7\124\uffa7\126\uffa7\001\002\000" +
    "\106\002\uffa4\003\uffa4\004\uffa4\006\uffa4\010\uffa4\015\uffa4" +
    "\020\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\067\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103" +
    "\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\114\uffa4" +
    "\124\uffa4\126\uffa4\001\002\000\106\002\uff33\003\uff33\004" +
    "\uff33\006\uff33\010\uff33\015\220\020\uff33\054\214\056\215" +
    "\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065" +
    "\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077\uff33" +
    "\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33\106" +
    "\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33\001\002" +
    "\000\106\002\uffac\003\uffac\004\uffac\006\uffac\010\uffac\015" +
    "\uffac\020\uffac\054\uffac\056\uffac\057\uffac\060\370\061\367" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\067\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac" +
    "\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\114" +
    "\uffac\124\uffac\126\uffac\001\002\000\106\002\uffab\003\uffab" +
    "\004\uffab\006\uffab\010\uffab\015\uffab\020\uffab\054\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\067\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab" +
    "\106\uffab\107\uffab\110\uffab\114\uffab\124\uffab\126\uffab\001" +
    "\002\000\106\002\uffe0\003\057\004\053\006\054\010\045" +
    "\015\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\041\065\052\067\040\073\077" +
    "\074\056\075\063\076\073\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\126\uffe0\001\002\000\106\002\uff33\003" +
    "\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054\214" +
    "\056\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064" +
    "\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33" +
    "\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105" +
    "\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33" +
    "\001\002\000\106\002\uffae\003\uffae\004\uffae\006\uffae\010" +
    "\uffae\015\uffae\020\uffae\054\uffae\056\uffae\057\uffae\060\370" +
    "\061\367\062\uffae\063\uffae\064\uffae\065\uffae\067\uffae\073" +
    "\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110" +
    "\uffae\114\uffae\124\uffae\126\uffae\001\002\000\106\002\uffad" +
    "\003\uffad\004\uffad\006\uffad\010\uffad\015\uffad\020\uffad\054" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\067\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad" +
    "\105\uffad\106\uffad\107\uffad\110\uffad\114\uffad\124\uffad\126" +
    "\uffad\001\002\000\050\003\057\004\053\006\054\010\045" +
    "\020\060\067\040\073\077\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\001\002\000\212\002\uff92\003\uff92\004" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\014\uff92" +
    "\015\uff92\017\146\020\124\021\137\022\141\023\133\024" +
    "\122\025\131\026\115\027\132\030\140\031\135\032\143" +
    "\033\126\034\112\035\107\036\113\037\111\040\117\041" +
    "\116\042\114\043\145\044\142\045\123\046\127\047\144" +
    "\050\130\051\134\052\125\053\uff92\054\uff92\056\uff92\057" +
    "\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92" +
    "\067\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076" +
    "\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104\uff92" +
    "\105\uff92\106\uff92\107\uff92\110\uff92\114\uff92\124\uff92\126" +
    "\uff92\001\002\000\076\011\uff5e\012\uff5e\017\146\020\124" +
    "\021\137\022\141\023\133\024\122\025\131\026\115\027" +
    "\132\030\140\031\135\032\143\033\126\034\112\035\107" +
    "\036\113\037\111\040\117\041\116\042\114\043\145\044" +
    "\142\045\123\046\127\047\144\050\130\051\134\052\125" +
    "\001\002\000\006\011\uff61\012\u0118\001\002\000\004\011" +
    "\u0117\001\002\000\212\002\uff62\003\uff62\004\uff62\006\uff62" +
    "\007\uff62\010\uff62\011\uff62\012\uff62\014\uff62\015\uff62\017" +
    "\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62" +
    "\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034" +
    "\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041\uff62\042\uff62" +
    "\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050\uff62\051" +
    "\uff62\052\uff62\053\uff62\054\uff62\056\uff62\057\uff62\060\uff62" +
    "\061\uff62\062\uff62\063\uff62\064\uff62\065\uff62\067\uff62\071" +
    "\uff62\072\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077\uff62" +
    "\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106" +
    "\uff62\107\uff62\110\uff62\114\uff62\124\uff62\126\uff62\001\002" +
    "\000\052\003\057\004\053\006\054\010\045\011\uff5f\020" +
    "\060\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\001\002\000\004\011\uff60\001\002\000\004" +
    "\066\u0120\001\002\000\110\002\uff33\003\uff33\004\uff33\006" +
    "\uff33\010\uff33\014\u011c\015\220\020\uff33\054\uff33\056\uff33" +
    "\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065" +
    "\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077\uff33" +
    "\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33\106" +
    "\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126\uff33\001\002" +
    "\000\106\002\uffe0\003\057\004\053\006\054\010\045\015" +
    "\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\041\065\052\067\040\073\077\074" +
    "\056\075\063\076\073\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\126\uffe0\001\002\000\106\002\uffd1\003\uffd1" +
    "\004\uffd1\006\uffd1\010\uffd1\015\uffd1\020\uffd1\054\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\067\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1" +
    "\106\uffd1\107\uffd1\110\uffd1\114\uffd1\124\uffd1\126\uffd1\001" +
    "\002\000\106\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33" +
    "\015\220\020\uff33\054\214\056\215\057\uff33\060\uff33\061" +
    "\uff33\062\uff33\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33" +
    "\074\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102" +
    "\uff33\103\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33" +
    "\114\uff33\124\uff33\126\uff33\001\002\000\106\002\uffd2\003" +
    "\uffd2\004\uffd2\006\uffd2\010\uffd2\015\uffd2\020\uffd2\054\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\067\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105" +
    "\uffd2\106\uffd2\107\uffd2\110\uffd2\114\uffd2\124\uffd2\126\uffd2" +
    "\001\002\000\052\003\057\004\053\006\054\010\045\020" +
    "\060\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\061\106\044\107\067\110\062\114" +
    "\051\124\100\127\u0122\001\002\000\004\014\uffd0\001\002" +
    "\000\034\004\u012f\006\u0130\007\u0131\067\040\073\077\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\u0132" +
    "\107\u012e\001\002\000\072\017\146\020\124\021\137\022" +
    "\141\023\133\024\122\025\131\026\115\027\132\030\140" +
    "\031\135\032\143\033\126\034\112\035\107\036\113\037" +
    "\111\040\117\041\116\042\114\043\145\044\142\045\123" +
    "\046\127\047\144\050\130\051\134\052\125\001\002\000" +
    "\004\014\uffcf\001\002\000\004\014\u0129\001\002\000\076" +
    "\012\u0127\014\uffc8\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\001\002\000\050\003" +
    "\057\004\053\006\054\010\045\020\060\067\040\073\077" +
    "\077\014\100\021\101\024\102\020\103\015\104\023\105" +
    "\061\106\044\107\067\110\062\114\051\124\100\001\002" +
    "\000\004\014\uffc7\001\002\000\106\002\uffe0\003\057\004" +
    "\053\006\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0" +
    "\057\010\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065" +
    "\052\067\040\073\077\074\056\075\063\076\073\077\014" +
    "\100\021\101\024\102\020\103\015\104\023\105\061\106" +
    "\044\107\067\110\062\114\051\124\100\126\uffe0\001\002" +
    "\000\106\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015" +
    "\220\020\uff33\054\214\056\215\057\uff33\060\uff33\061\uff33" +
    "\062\uff33\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074" +
    "\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33" +
    "\103\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114" +
    "\uff33\124\uff33\126\uff33\001\002\000\106\002\uffd3\003\uffd3" +
    "\004\uffd3\006\uffd3\010\uffd3\015\uffd3\020\uffd3\054\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\067\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077" +
    "\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3" +
    "\106\uffd3\107\uffd3\110\uffd3\114\uffd3\124\uffd3\126\uffd3\001" +
    "\002\000\010\007\uffc6\012\u013a\014\uffc6\001\002\000\010" +
    "\007\uffc0\012\uffc0\014\uffc0\001\002\000\004\013\257\001" +
    "\002\000\020\003\341\006\340\007\uffc2\010\336\012\uffc2" +
    "\013\335\014\uffc2\001\002\000\034\003\u0136\004\u012f\014" +
    "\uffcb\067\040\073\077\077\014\100\021\101\024\102\020" +
    "\103\015\104\023\105\u0132\107\u012e\001\002\000\004\014" +
    "\uffc9\001\002\000\010\007\uffc3\012\uffc3\014\uffc3\001\002" +
    "\000\010\007\uffc1\012\uffc1\014\uffc1\001\002\000\004\007" +
    "\u0135\001\002\000\004\014\uffca\001\002\000\004\007\u0139" +
    "\001\002\000\006\007\u0138\014\uffcc\001\002\000\004\014" +
    "\uffce\001\002\000\004\014\uffcd\001\002\000\030\004\u012f" +
    "\067\040\073\077\077\014\100\021\101\024\102\020\103" +
    "\015\104\023\105\u0132\107\u012e\001\002\000\010\007\uffc5" +
    "\012\u013c\014\uffc5\001\002\000\030\004\u012f\067\040\073" +
    "\077\077\014\100\021\101\024\102\020\103\015\104\023" +
    "\105\u0132\107\u012e\001\002\000\006\007\uffc4\014\uffc4\001" +
    "\002\000\052\003\105\004\053\006\054\007\u013f\010\045" +
    "\020\060\067\040\073\077\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\001\002\000\212\002\uff4c\003\uff4c\004" +
    "\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\012\uff4c\014\uff4c" +
    "\015\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024" +
    "\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c" +
    "\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041" +
    "\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c" +
    "\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\056\uff4c\057" +
    "\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\065\uff4c" +
    "\067\uff4c\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076" +
    "\uff4c\077\uff4c\100\uff4c\101\uff4c\102\uff4c\103\uff4c\104\uff4c" +
    "\105\uff4c\106\uff4c\107\uff4c\110\uff4c\114\uff4c\124\uff4c\126" +
    "\uff4c\001\002\000\212\002\uff4d\003\uff4d\004\uff4d\006\uff4d" +
    "\007\uff4d\010\uff4d\011\uff4d\012\uff4d\014\uff4d\015\uff4d\017" +
    "\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d" +
    "\026\uff4d\027\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034" +
    "\uff4d\035\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\054\uff4d\056\uff4d\057\uff4d\060\uff4d" +
    "\061\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\067\uff4d\071" +
    "\uff4d\072\uff4d\073\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d" +
    "\100\uff4d\101\uff4d\102\uff4d\103\uff4d\104\uff4d\105\uff4d\106" +
    "\uff4d\107\uff4d\110\uff4d\114\uff4d\124\uff4d\126\uff4d\001\002" +
    "\000\070\002\uffef\003\uffef\004\uffef\006\uffef\010\uffef\015" +
    "\uffef\020\uffef\057\uffef\064\uffef\065\uffef\067\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110\uffef" +
    "\114\uffef\124\uffef\001\002\000\070\002\uff33\003\uff33\004" +
    "\uff33\006\uff33\010\uff33\015\220\020\uff33\057\uff33\064\uff33" +
    "\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077" +
    "\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33" +
    "\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\001\002\000" +
    "\070\002\ufff2\003\ufff2\004\ufff2\006\ufff2\010\ufff2\015\220" +
    "\020\ufff2\057\010\064\ufff2\065\ufff2\067\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\114" +
    "\ufff2\124\ufff2\001\002\000\066\002\ufffa\003\057\004\053" +
    "\006\054\010\045\020\060\057\010\064\041\065\052\067" +
    "\040\073\077\074\056\075\063\076\073\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\070\002\uff33" +
    "\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33\057" +
    "\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33" +
    "\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104" +
    "\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33" +
    "\001\002\000\066\002\ufff8\003\057\004\053\006\054\010" +
    "\045\020\060\057\010\064\041\065\052\067\040\073\077" +
    "\074\056\075\063\076\073\077\014\100\021\101\024\102" +
    "\020\103\015\104\023\105\061\106\044\107\067\110\062" +
    "\114\051\124\100\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufffb\001\002\000\066\002\ufff9\003\057\004\053" +
    "\006\054\010\045\020\060\057\010\064\041\065\052\067" +
    "\040\073\077\074\056\075\063\076\073\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\001\002\000\004\002\ufffc" +
    "\001\002\000\072\002\uff31\003\uff31\004\uff31\006\uff31\010" +
    "\uff31\014\u014e\015\uff31\020\uff31\057\uff31\064\uff31\065\uff31" +
    "\067\uff31\073\uff31\074\uff31\075\uff31\076\uff31\077\uff31\100" +
    "\uff31\101\uff31\102\uff31\103\uff31\104\uff31\105\uff31\106\uff31" +
    "\107\uff31\110\uff31\114\uff31\124\uff31\001\002\000\072\002" +
    "\uff2f\003\uff2f\004\uff2f\006\uff2f\010\uff2f\014\u014d\015\uff2f" +
    "\020\uff2f\057\uff2f\064\uff2f\065\uff2f\067\uff2f\073\uff2f\074" +
    "\uff2f\075\uff2f\076\uff2f\077\uff2f\100\uff2f\101\uff2f\102\uff2f" +
    "\103\uff2f\104\uff2f\105\uff2f\106\uff2f\107\uff2f\110\uff2f\114" +
    "\uff2f\124\uff2f\001\002\000\070\002\uff30\003\uff30\004\uff30" +
    "\006\uff30\010\uff30\015\uff30\020\uff30\057\uff30\064\uff30\065" +
    "\uff30\067\uff30\073\uff30\074\uff30\075\uff30\076\uff30\077\uff30" +
    "\100\uff30\101\uff30\102\uff30\103\uff30\104\uff30\105\uff30\106" +
    "\uff30\107\uff30\110\uff30\114\uff30\124\uff30\001\002\000\070" +
    "\002\uff32\003\uff32\004\uff32\006\uff32\010\uff32\015\uff32\020" +
    "\uff32\057\uff32\064\uff32\065\uff32\067\uff32\073\uff32\074\uff32" +
    "\075\uff32\076\uff32\077\uff32\100\uff32\101\uff32\102\uff32\103" +
    "\uff32\104\uff32\105\uff32\106\uff32\107\uff32\110\uff32\114\uff32" +
    "\124\uff32\001\002\000\004\006\u015a\001\002\000\110\002" +
    "\uff3f\003\uff3f\004\uff3f\006\uff3f\010\uff3f\014\u0153\015\220" +
    "\020\uff3f\054\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062" +
    "\uff3f\063\uff3f\064\uff3f\065\uff3f\067\uff3f\073\uff3f\074\uff3f" +
    "\075\uff3f\076\uff3f\077\uff3f\100\uff3f\101\uff3f\102\uff3f\103" +
    "\uff3f\104\uff3f\105\uff3f\106\uff3f\107\uff3f\110\uff3f\114\uff3f" +
    "\124\uff3f\126\uff3f\001\002\000\106\002\uff40\003\uff40\004" +
    "\uff40\006\uff40\010\uff40\015\220\020\uff40\054\uff40\056\uff40" +
    "\057\uff40\060\uff40\061\uff40\062\uff40\063\uff40\064\uff40\065" +
    "\uff40\067\uff40\073\uff40\074\uff40\075\uff40\076\uff40\077\uff40" +
    "\100\uff40\101\uff40\102\uff40\103\uff40\104\uff40\105\uff40\106" +
    "\uff40\107\uff40\110\uff40\114\uff40\124\uff40\126\uff40\001\002" +
    "\000\106\002\uff42\003\uff42\004\uff42\006\uff42\010\uff42\015" +
    "\uff42\020\uff42\054\uff42\056\uff42\057\uff42\060\uff42\061\uff42" +
    "\062\uff42\063\uff42\064\uff42\065\uff42\067\uff42\073\uff42\074" +
    "\uff42\075\uff42\076\uff42\077\uff42\100\uff42\101\uff42\102\uff42" +
    "\103\uff42\104\uff42\105\uff42\106\uff42\107\uff42\110\uff42\114" +
    "\uff42\124\uff42\126\uff42\001\002\000\106\002\uffec\003\uffec" +
    "\004\uffec\006\uffec\010\uffec\015\uffec\020\uffec\054\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\067\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077" +
    "\014\100\021\101\024\102\020\103\015\104\023\105\uffec" +
    "\106\uffec\107\uffec\110\uffec\114\uffec\124\uffec\126\uffec\001" +
    "\002\000\106\002\uff41\003\uff41\004\uff41\006\uff41\010\uff41" +
    "\015\uff41\020\uff41\054\uff41\056\uff41\057\uff41\060\uff41\061" +
    "\uff41\062\uff41\063\uff41\064\uff41\065\uff41\067\uff41\073\uff41" +
    "\074\uff41\075\uff41\076\uff41\077\uff41\100\uff41\101\uff41\102" +
    "\uff41\103\uff41\104\uff41\105\uff41\106\uff41\107\uff41\110\uff41" +
    "\114\uff41\124\uff41\126\uff41\001\002\000\106\002\uffed\003" +
    "\uffed\004\uffed\006\uffed\010\uffed\015\uffed\020\uffed\054\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\067\uffed\073\uffed\074\uffed\075\uffed\076\uffed" +
    "\077\uffed\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105" +
    "\uffed\106\uffed\107\uffed\110\uffed\114\uffed\124\uffed\126\uffed" +
    "\001\002\000\106\002\uffe0\003\057\004\053\006\054\010" +
    "\045\015\uffe0\020\060\054\uffe0\056\uffe0\057\010\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\041\065\052\067\040\073" +
    "\077\074\056\075\063\076\073\077\014\100\021\101\024" +
    "\102\020\103\015\104\023\105\061\106\044\107\067\110" +
    "\062\114\051\124\100\126\uffe0\001\002\000\106\002\uff33" +
    "\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020\uff33\054" +
    "\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33" +
    "\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075\uff33\076" +
    "\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33" +
    "\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124\uff33\126" +
    "\uff33\001\002\000\106\002\uff43\003\uff43\004\uff43\006\uff43" +
    "\010\uff43\015\uff43\020\uff43\054\uff43\056\uff43\057\uff43\060" +
    "\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065\uff43\067\uff43" +
    "\073\uff43\074\uff43\075\uff43\076\uff43\077\uff43\100\uff43\101" +
    "\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43\107\uff43" +
    "\110\uff43\114\uff43\124\uff43\126\uff43\001\002\000\004\014" +
    "\u0162\001\002\000\020\007\u015c\077\014\100\021\101\024" +
    "\102\020\103\015\104\023\001\002\000\004\007\u0161\001" +
    "\002\000\004\014\uff3d\001\002\000\004\004\u015e\001\002" +
    "\000\006\007\uff3c\012\u015f\001\002\000\016\077\014\100" +
    "\021\101\024\102\020\103\015\104\023\001\002\000\004" +
    "\007\uff3b\001\002\000\004\014\uff3e\001\002\000\106\002" +
    "\uffec\003\uffec\004\uffec\006\uffec\010\uffec\015\uffec\020\uffec" +
    "\054\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\065\uffec\067\uffec\073\uffec\074\uffec\075\uffec" +
    "\076\uffec\077\014\100\021\101\024\102\020\103\015\104" +
    "\023\105\uffec\106\uffec\107\uffec\110\uffec\114\uffec\124\uffec" +
    "\126\uffec\001\002\000\106\002\uffe0\003\057\004\053\006" +
    "\054\010\045\015\uffe0\020\060\054\uffe0\056\uffe0\057\010" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\041\065\052\067" +
    "\040\073\077\074\056\075\063\076\073\077\014\100\021" +
    "\101\024\102\020\103\015\104\023\105\061\106\044\107" +
    "\067\110\062\114\051\124\100\126\uffe0\001\002\000\106" +
    "\002\uff33\003\uff33\004\uff33\006\uff33\010\uff33\015\220\020" +
    "\uff33\054\214\056\215\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\065\uff33\067\uff33\073\uff33\074\uff33\075" +
    "\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\114\uff33\124" +
    "\uff33\126\uff33\001\002\000\106\002\uff44\003\uff44\004\uff44" +
    "\006\uff44\010\uff44\015\uff44\020\uff44\054\uff44\056\uff44\057" +
    "\uff44\060\uff44\061\uff44\062\uff44\063\uff44\064\uff44\065\uff44" +
    "\067\uff44\073\uff44\074\uff44\075\uff44\076\uff44\077\uff44\100" +
    "\uff44\101\uff44\102\uff44\103\uff44\104\uff44\105\uff44\106\uff44" +
    "\107\uff44\110\uff44\114\uff44\124\uff44\126\uff44\001\002\000" +
    "\004\002\000\001\002\000\072\002\ufff3\003\ufff3\004\ufff3" +
    "\006\ufff3\010\ufff3\015\ufff3\020\ufff3\057\ufff3\064\ufff3\065" +
    "\ufff3\067\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3" +
    "\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106" +
    "\ufff3\107\ufff3\110\ufff3\114\ufff3\124\ufff3\126\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\016\002\003\006\005\007\012\054\011\056" +
    "\004\057\006\001\001\000\006\002\003\007\u0166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\003\005\021" +
    "\007\u0141\013\u0140\055\u0142\001\001\000\010\005\021\010" +
    "\015\013\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\041\005\070\011\054\014\073\015\075\017" +
    "\063\020\042\021\046\022\047\025\045\033\064\035\065" +
    "\036\036\040\071\047\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\021\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\021\013\030\001\001\000\002\001\001" +
    "\000\004\052\032\001\001\000\002\001\001\000\006\005" +
    "\021\013\034\001\001\000\002\001\001\000\004\052\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\101\015" +
    "\075\017\u0113\020\042\021\046\022\047\023\u0115\024\u0114" +
    "\025\045\001\001\000\004\016\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\101" +
    "\015\075\017\203\020\206\021\046\022\047\025\045\034" +
    "\362\001\001\000\006\016\336\027\333\001\001\000\022" +
    "\005\101\015\075\017\330\020\206\021\046\022\047\025" +
    "\045\034\327\001\001\000\002\001\001\000\020\005\101" +
    "\015\075\017\325\020\042\021\046\022\047\025\045\001" +
    "\001\000\004\016\107\001\001\000\020\005\101\015\075" +
    "\017\324\020\042\021\046\022\047\025\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\101\015\075\017\203\020\206\021" +
    "\046\022\047\025\045\034\202\001\001\000\040\002\041" +
    "\005\070\011\201\014\073\015\075\017\063\020\042\021" +
    "\046\022\047\025\045\033\064\035\065\036\036\040\071" +
    "\047\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\101\015\075" +
    "\017\102\020\042\021\046\022\047\025\045\030\105\001" +
    "\001\000\002\001\001\000\004\016\135\001\001\000\002" +
    "\001\001\000\004\016\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\101\015\075\017\117\020\042" +
    "\021\046\022\047\025\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\135\001\001\000\004\016\107\001\001\000\020\005\101" +
    "\015\075\017\172\020\042\021\046\022\047\025\045\001" +
    "\001\000\020\005\101\015\075\017\171\020\042\021\046" +
    "\022\047\025\045\001\001\000\020\005\101\015\075\017" +
    "\170\020\042\021\046\022\047\025\045\001\001\000\020" +
    "\005\101\015\075\017\167\020\042\021\046\022\047\025" +
    "\045\001\001\000\020\005\101\015\075\017\166\020\042" +
    "\021\046\022\047\025\045\001\001\000\020\005\101\015" +
    "\075\017\165\020\042\021\046\022\047\025\045\001\001" +
    "\000\020\005\101\015\075\017\164\020\042\021\046\022" +
    "\047\025\045\001\001\000\020\005\101\015\075\017\163" +
    "\020\042\021\046\022\047\025\045\001\001\000\020\005" +
    "\101\015\075\017\162\020\042\021\046\022\047\025\045" +
    "\001\001\000\020\005\101\015\075\017\161\020\042\021" +
    "\046\022\047\025\045\001\001\000\020\005\101\015\075" +
    "\017\160\020\042\021\046\022\047\025\045\001\001\000" +
    "\020\005\101\015\075\017\157\020\042\021\046\022\047" +
    "\025\045\001\001\000\002\001\001\000\020\005\101\015" +
    "\075\017\155\020\042\021\046\022\047\025\045\001\001" +
    "\000\020\005\101\015\075\017\154\020\042\021\046\022" +
    "\047\025\045\001\001\000\020\005\101\015\075\017\153" +
    "\020\042\021\046\022\047\025\045\001\001\000\020\005" +
    "\101\015\075\017\152\020\042\021\046\022\047\025\045" +
    "\001\001\000\020\005\101\015\075\017\151\020\042\021" +
    "\046\022\047\025\045\001\001\000\020\005\101\015\075" +
    "\017\150\020\042\021\046\022\047\025\045\001\001\000" +
    "\020\005\101\015\075\017\147\020\042\021\046\022\047" +
    "\025\045\001\001\000\020\005\101\015\075\017\146\020" +
    "\042\021\046\022\047\025\045\001\001\000\004\016\135" +
    "\001\001\000\004\016\135\001\001\000\004\016\135\001" +
    "\001\000\004\016\135\001\001\000\004\016\135\001\001" +
    "\000\004\016\135\001\001\000\004\016\135\001\001\000" +
    "\004\016\135\001\001\000\002\001\001\000\004\016\135" +
    "\001\001\000\004\016\135\001\001\000\004\016\135\001" +
    "\001\000\004\016\135\001\001\000\004\016\135\001\001" +
    "\000\004\016\135\001\001\000\004\016\135\001\001\000" +
    "\004\016\135\001\001\000\004\016\135\001\001\000\004" +
    "\016\135\001\001\000\004\016\135\001\001\000\004\016" +
    "\135\001\001\000\022\005\101\015\075\017\102\020\042" +
    "\021\046\022\047\025\045\030\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\101\015\075\017\102" +
    "\020\042\021\046\022\047\025\045\030\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\135\001\001\000\022\005\101\015" +
    "\075\017\224\020\206\021\046\022\047\025\045\034\223" +
    "\001\001\000\042\002\041\005\070\012\210\014\211\015" +
    "\075\016\107\017\063\020\042\021\046\022\047\025\045" +
    "\033\064\035\065\036\036\040\071\047\074\001\001\000" +
    "\002\001\001\000\040\002\041\005\070\012\221\014\211" +
    "\015\075\017\063\020\042\021\046\022\047\025\045\033" +
    "\064\035\065\036\036\040\071\047\074\001\001\000\004" +
    "\051\220\001\001\000\040\002\041\005\070\012\212\014" +
    "\211\015\075\017\063\020\042\021\046\022\047\025\045" +
    "\033\064\035\065\036\036\040\071\047\074\001\001\000" +
    "\002\001\001\000\040\002\041\005\070\012\216\014\211" +
    "\015\075\017\063\020\042\021\046\022\047\025\045\033" +
    "\064\035\065\036\036\040\071\047\074\001\001\000\040" +
    "\002\041\005\070\012\215\014\211\015\075\017\063\020" +
    "\042\021\046\022\047\025\045\033\064\035\065\036\036" +
    "\040\071\047\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\135\001\001\000\020\005\101\015\075\017\251\020\042" +
    "\021\046\022\047\025\045\001\001\000\020\005\101\015" +
    "\075\017\250\020\042\021\046\022\047\025\045\001\001" +
    "\000\020\005\101\015\075\017\247\020\042\021\046\022" +
    "\047\025\045\001\001\000\020\005\101\015\075\017\246" +
    "\020\042\021\046\022\047\025\045\001\001\000\020\005" +
    "\101\015\075\017\245\020\042\021\046\022\047\025\045" +
    "\001\001\000\020\005\101\015\075\017\244\020\042\021" +
    "\046\022\047\025\045\001\001\000\020\005\101\015\075" +
    "\017\243\020\042\021\046\022\047\025\045\001\001\000" +
    "\020\005\101\015\075\017\242\020\042\021\046\022\047" +
    "\025\045\001\001\000\002\001\001\000\020\005\101\015" +
    "\075\017\241\020\042\021\046\022\047\025\045\001\001" +
    "\000\020\005\101\015\075\017\240\020\042\021\046\022" +
    "\047\025\045\001\001\000\004\016\135\001\001\000\004" +
    "\016\135\001\001\000\004\016\135\001\001\000\004\016" +
    "\135\001\001\000\004\016\135\001\001\000\004\016\135" +
    "\001\001\000\004\016\135\001\001\000\004\016\135\001" +
    "\001\000\004\016\135\001\001\000\004\016\135\001\001" +
    "\000\002\001\001\000\040\002\041\005\070\012\254\014" +
    "\211\015\075\017\063\020\042\021\046\022\047\025\045" +
    "\033\064\035\065\036\036\040\071\047\074\001\001\000" +
    "\004\051\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\101\015\075\017\102\020" +
    "\042\021\046\022\047\025\045\030\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\002\041\005\070\012" +
    "\317\014\211\015\075\017\063\020\042\021\046\022\047" +
    "\025\045\033\064\035\065\036\036\040\071\047\074\051" +
    "\316\001\001\000\040\002\041\005\070\012\265\014\211" +
    "\015\075\017\063\020\042\021\046\022\047\025\045\033" +
    "\064\035\065\036\036\040\071\047\074\001\001\000\004" +
    "\051\266\001\001\000\006\037\271\050\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\041\005\070\012\276\014\211\015\075\017\063" +
    "\020\042\021\046\022\047\025\045\033\064\035\065\036" +
    "\036\040\071\047\074\001\001\000\004\051\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\306\001" +
    "\001\000\040\002\041\005\070\012\303\014\211\015\075" +
    "\017\063\020\042\021\046\022\047\025\045\033\064\035" +
    "\065\036\036\040\071\047\074\001\001\000\004\051\304" +
    "\001\001\000\002\001\001\000\040\002\041\005\070\012" +
    "\307\014\211\015\075\017\063\020\042\021\046\022\047" +
    "\025\045\033\064\035\065\036\036\040\071\047\074\001" +
    "\001\000\002\001\001\000\004\051\310\001\001\000\002" +
    "\001\001\000\004\051\315\001\001\000\040\002\041\005" +
    "\070\012\313\014\211\015\075\017\063\020\042\021\046" +
    "\022\047\025\045\033\064\035\065\036\036\040\071\047" +
    "\074\001\001\000\004\051\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\320\001" +
    "\001\000\006\037\321\050\322\001\001\000\002\001\001" +
    "\000\004\037\323\001\001\000\002\001\001\000\004\016" +
    "\135\001\001\000\004\016\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\101\015\075\017\347\020\042\021\046\022" +
    "\047\025\045\026\350\001\001\000\020\005\101\015\075" +
    "\017\345\020\042\021\046\022\047\025\045\001\001\000" +
    "\022\005\101\015\075\017\102\020\042\021\046\022\047" +
    "\025\045\030\344\001\001\000\006\027\342\031\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\135\001\001\000\020\005" +
    "\101\015\075\017\355\020\042\021\046\022\047\025\045" +
    "\001\001\000\004\016\135\001\001\000\002\001\001\000" +
    "\006\027\342\031\352\001\001\000\002\001\001\000\020" +
    "\005\101\015\075\017\354\020\042\021\046\022\047\025" +
    "\045\001\001\000\004\016\135\001\001\000\004\016\135" +
    "\001\001\000\002\001\001\000\022\005\101\015\075\017" +
    "\102\020\042\021\046\022\047\025\045\030\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\107\051\365\001\001\000\040\002\041\005\070" +
    "\012\u010a\014\211\015\075\017\063\020\042\021\046\022" +
    "\047\025\045\033\064\035\065\036\036\040\071\047\074" +
    "\001\001\000\004\046\370\001\001\000\002\001\001\000" +
    "\022\005\101\015\075\017\203\020\206\021\046\022\047" +
    "\025\045\034\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\107\051\374\001\001\000\040\002\041" +
    "\005\070\012\376\014\211\015\075\017\063\020\042\021" +
    "\046\022\047\025\045\033\064\035\065\036\036\040\071" +
    "\047\074\001\001\000\004\046\375\001\001\000\002\001" +
    "\001\000\004\051\377\001\001\000\004\046\u0100\001\001" +
    "\000\002\001\001\000\040\002\041\005\070\012\u0102\014" +
    "\211\015\075\017\063\020\042\021\046\022\047\025\045" +
    "\033\064\035\065\036\036\040\071\047\074\001\001\000" +
    "\004\051\u0103\001\001\000\004\046\u0104\001\001\000\002" +
    "\001\001\000\004\051\u0109\001\001\000\040\002\041\005" +
    "\070\012\u0107\014\211\015\075\017\063\020\042\021\046" +
    "\022\047\025\045\033\064\035\065\036\036\040\071\047" +
    "\074\001\001\000\004\051\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u010b\001\001\000\004\046" +
    "\u010c\001\001\000\002\001\001\000\040\002\041\005\070" +
    "\012\u010e\014\211\015\075\017\063\020\042\021\046\022" +
    "\047\025\045\033\064\035\065\036\036\040\071\047\074" +
    "\001\001\000\004\051\u010f\001\001\000\004\046\u0110\001" +
    "\001\000\002\001\001\000\020\005\101\015\075\017\u0112" +
    "\020\042\021\046\022\047\025\045\001\001\000\004\016" +
    "\135\001\001\000\004\016\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\101\015" +
    "\075\017\u0113\020\042\021\046\022\047\023\u0118\024\u0114" +
    "\025\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\u011c\001\001\000\040\002\041\005\070\012\u011d" +
    "\014\211\015\075\017\063\020\042\021\046\022\047\025" +
    "\045\033\064\035\065\036\036\040\071\047\074\001\001" +
    "\000\002\001\001\000\004\051\u011e\001\001\000\002\001" +
    "\001\000\026\005\101\015\075\017\u0122\020\u0125\021\046" +
    "\022\047\025\045\041\u0124\042\u0120\043\u0123\001\001\000" +
    "\002\001\001\000\014\005\101\021\u012c\025\u0132\044\u0133" +
    "\045\u012b\001\001\000\004\016\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\101" +
    "\015\075\017\u0122\020\u0125\021\046\022\047\025\045\042" +
    "\u0127\001\001\000\002\001\001\000\040\002\041\005\070" +
    "\012\u0129\014\211\015\075\017\063\020\042\021\046\022" +
    "\047\025\045\033\064\035\065\036\036\040\071\047\074" +
    "\001\001\000\004\051\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\333\001\001\000\014\005\101\021\u012c\025\u0132\044" +
    "\u0136\045\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\101\021\u012c\025\u0132\045\u013a\001" +
    "\001\000\002\001\001\000\012\005\101\021\u012c\025\u0132" +
    "\045\u013c\001\001\000\002\001\001\000\022\005\101\015" +
    "\075\017\102\020\042\021\046\022\047\025\045\030\u013f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0148\001\001\000\010\002\003\007\u0144" +
    "\051\u0143\001\001\000\040\002\041\005\070\011\u0147\014" +
    "\073\015\075\017\063\020\042\021\046\022\047\025\045" +
    "\033\064\035\065\036\036\040\071\047\074\001\001\000" +
    "\004\051\u0145\001\001\000\040\002\041\005\070\011\u0146" +
    "\014\073\015\075\017\063\020\042\021\046\022\047\025" +
    "\045\033\064\035\065\036\036\040\071\047\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\041\005" +
    "\070\011\u0149\014\073\015\075\017\063\020\042\021\046" +
    "\022\047\025\045\033\064\035\065\036\036\040\071\047" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u0158\001\001\000\004\051\u0153\001\001\000\004\051\u0151" +
    "\001\001\000\002\001\001\000\010\005\021\013\u0154\032" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\041\005\070\012\u0156\014\211\015\075\017\063\020" +
    "\042\021\046\022\047\025\045\033\064\035\065\036\036" +
    "\040\071\047\074\001\001\000\004\051\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u015a\005\u015c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\u015f\005\u015c\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\021\013" +
    "\u0154\032\u0162\001\001\000\040\002\041\005\070\012\u0163" +
    "\014\211\015\075\017\063\020\042\021\046\022\047\025" +
    "\045\033\064\035\065\036\036\040\071\047\074\001\001" +
    "\000\004\051\u0164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 java_cup.runtime.Symbol t;
      do {        
        t = s.next_token();
      } while (((Symbol)t.value).sym == sym.TAB || ((Symbol)t.value).sym == sym.ERROR );
      return t;  
    }


    private int _ultimaLineaDerecha=1;
    private int _ultimaLineaIzquierda=1;
    private ArrayList<IImprimible> errores= new ArrayList<IImprimible>();
    MyPythonScanner s;
    Analizador semantico=new Analizador();
    public Parser(MyPythonScanner s){ super(s); this.s=s; }
    private void addError(IImprimible nodo){
        errores.add(nodo);
    }
    
    public String getTabla(){
        return semantico.getTablaSimbolos();
    }
    public ArrayList<IImprimible> erroresSintacticos(){
        return errores;
    }
    public ArrayList<IImprimible> erroresLexicos(){
        return  s.getErrores();
    }
    public ArrayList<IImprimible> erroresSemanticos(){
        return  semantico.getErrores();
    }
    public void generarCodigo(String path) throws IOException{
        semantico.validarLlamdos();
        if(erroresLexicos().size()==0 &&
                erroresSintacticos().size()==0
                && erroresSemanticos().size()==0){
            GeneradorCodigo generador = new GeneradorCodigo(path);
            generador.generarFunciones(semantico.getFunciones());
            generador.generarVariablesGlobales(semantico.getVariablesGlobales());
            generador.generarCodigo(semantico.getCodigoPrincipal());
            generador.generateAsmFile();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= estructura1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("PROGRAMA", new Nodo[]{(Nodo)e});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= estructura2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("PROGRAMA", new Nodo[]{(Nodo)e});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= 
            {
              Object RESULT =null;
		
                addError(new Nodo("ERROR, NO HAY CÓDIGO"));
                RESULT = new Nodo("ERROR, NO HAY CÓDIGO");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura2 ::= defClass atributos funciones puntoComa codigoPrincipal 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Nodo("ESTRUCTURA2", new Nodo[]{(Nodo)dc,(Nodo) a,(Nodo) df,(Nodo)pc,(Nodo)cp});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura2 ::= defClass funciones puntoComa codigoPrincipal 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Nodo("ESTRUCTURA2", new Nodo[]{(Nodo)dc,(Nodo) df,(Nodo)pc,(Nodo)cp});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura2 ::= defClass atributos puntoComa codigoPrincipal 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Nodo("ESTRUCTURA2", new Nodo[]{(Nodo)dc,(Nodo) a,(Nodo)pc,(Nodo)cp});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura2 ::= defClass atributos puntoComa 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo errorC=new Nodo("Error: Falta el codigo principal");
            addError(errorC);
            RESULT = new Nodo("ESTRUCTURA2", new Nodo[]{(Nodo)dc,(Nodo) a,(Nodo)pc,errorC});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura2 ::= defClass funciones puntoComa 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo errorC=new Nodo("Error: Falta el codigo principal");
            addError(errorC);
            RESULT = new Nodo("ESTRUCTURA2", new Nodo[]{(Nodo)dc,(Nodo) df,(Nodo)pc,errorC});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura2 ::= defClass atributos funciones puntoComa 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo errorC=new Nodo("Error: Falta el codigo principal");
            addError(errorC);
            RESULT = new Nodo("ESTRUCTURA2", new Nodo[]{(Nodo)dc,(Nodo) a,(Nodo) df,(Nodo)pc,errorC});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura1 ::= funciones variablesGlobales codigoPrincipal EOFINAL 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new Nodo("ESTRUCTURA1", new Nodo[]{(Nodo)df,(Nodo) vg,(Nodo) cp});
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura1 ::= funciones variablesGlobales codigoPrincipal 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Nodo("ESTRUCTURA1", new Nodo[]{(Nodo)df,(Nodo) vg,(Nodo) cp});
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura1 ::= funciones variablesGlobales EOFINAL 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    addError( new Nodo("Error: Falta el codigo principal"));
                    RESULT = new Nodo("Error: Falta el codigo principal", new Nodo[]{(Nodo)df,(Nodo) vg});
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura1 ::= funciones variablesGlobales 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    addError( new Nodo("Error: Falta el codigo principal"));
                    RESULT = new Nodo("Error: Falta el codigo principal", new Nodo[]{(Nodo)df,(Nodo) vg});
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funciones ::= funcDef funciones 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Nodo("DECLARACION FUNCIONES", new Nodo[]{(Nodo)fd,(Nodo) df});
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones ::= 
            {
              Object RESULT =null;
		
                                RESULT = new Nodo();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variablesGlobales ::= declaracionVariables 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        semantico.insertarVariablesGlobales();
                        RESULT = new Nodo("VARIABLES GLOBALES", new Nodo[]{(Nodo) dv});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablesGlobales",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variablesGlobales ::= 
            {
              Object RESULT =null;
		
                        RESULT = new Nodo();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablesGlobales",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributos ::= declaracionVariables 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Nodo("ATRIBUTOS DE LA CLASE", new Nodo[]{(Nodo) dv});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atributos ::= 
            {
              Object RESULT =null;
		
                        RESULT = new Nodo();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variablesLocales ::= declaracionVariables 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        semantico.insertarVariablesGlobales();
                        RESULT = new Nodo("VARIABLES LOCALES", new Nodo[]{(Nodo) dv});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablesLocales",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variablesLocales ::= 
            {
              Object RESULT =null;
		
                        RESULT = new Nodo();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablesLocales",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionVariables ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        semantico.recordarID((String)((java_cup.runtime.Symbol)i).value,((java_cup.runtime.Symbol) i).right );
                        RESULT = new Nodo("DECLARACION VARIABLES",new Nodo[]{(Nodo) t, id});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionVariables ::= tipo ID COMA declaracionMultiple 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        Nodo com=new Nodo((String)((java_cup.runtime.Symbol)c).value);
                        semantico.recordarID((String)((java_cup.runtime.Symbol)i).value,((java_cup.runtime.Symbol) i).right );
                        RESULT = new Nodo("DECLARACION VARIABLES",new Nodo[]{(Nodo) t, id, com, (Nodo) dm});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionVariables ::= tipo ID declaracionVariables 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        semantico.insertarVariablesGlobales();
                        semantico.recordarID((String)((java_cup.runtime.Symbol)i).value,((java_cup.runtime.Symbol) i).right );
                        RESULT = new Nodo("DECLARACION VARIABLES",new Nodo[]{(Nodo) t, id, (Nodo) dv});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionVariables ::= tipo declaracionVariables 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        addError(new Nodo("Error en la declaracion de la variable, en la linea: "+_ultimaLineaIzquierda));
                        semantico.insertarVariablesGlobales();
                        RESULT = new Nodo("Error en la declaracion de la variable, en la linea: "+_ultimaLineaIzquierda,
                                     new Nodo[]{(Nodo)dv});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionVariables ::= tipo error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        addError(new Nodo("Error en la declaracion de la variable, en la linea: "+_ultimaLineaIzquierda));
                        RESULT = new Nodo("Error en la declaracion de la variable, en la linea: "+_ultimaLineaIzquierda);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionMultiple ::= ID COMA declaracionMultiple 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        Nodo com=new Nodo((String)((java_cup.runtime.Symbol)c).value);
                        semantico.recordarID((String)((java_cup.runtime.Symbol)i).value,((java_cup.runtime.Symbol) i).right );
                        RESULT = new Nodo("DECLARACION MULTIPLE",new Nodo[]{ id, com, (Nodo) dm});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionMultiple",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionMultiple ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        semantico.recordarID((String)((java_cup.runtime.Symbol)i).value,((java_cup.runtime.Symbol) i).right );
                        RESULT = new Nodo("DECLARACION MULTIPLE",new Nodo[]{ id});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionMultiple",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionMultiple ::= ID declaracionVariables 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        semantico.insertarVariablesGlobales();
                        semantico.recordarID((String)((java_cup.runtime.Symbol)i).value,((java_cup.runtime.Symbol) i).right );
                        RESULT = new Nodo("DECLARACION VARIABLES",new Nodo[]{id,(Nodo) dv});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionMultiple",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // codigoPrincipal ::= codigo codigoPrincipal 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Nodo("CODIGO PRINCIPAL", new Nodo[]{(Nodo)c,(Nodo)rc});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoPrincipal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // codigoPrincipal ::= codigo 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Nodo("CODIGO PRINCIPAL", new Nodo[]{(Nodo)c});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoPrincipal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // codigoFuncion ::= codigo codigoFuncion 
            {
              Object RESULT =null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Nodo("CODIGO", new Nodo[]{(Nodo)rc, (Nodo) cf});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoFuncion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // codigoFuncion ::= 
            {
              Object RESULT =null;
		
                        semantico.marcaNull();
                        RESULT = new Nodo("CODIGO");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoFuncion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codigoFuncion ::= codigoFuncion BREAK codigoFuncion 
            {
              Object RESULT =null;
		int rc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rc2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rc2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rc2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)b).value);
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)b).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)b).left;
                        semantico.quitarMarca();
                        semantico.quitarProximaMarca();
                        RESULT = new Nodo("CODIGO", new Nodo[]{(Nodo)rc1, id, (Nodo)rc2});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoFuncion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // codigoFuncion ::= codigoFuncion CONTINUE codigoFuncion 
            {
              Object RESULT =null;
		int rc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rc2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rc2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rc2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)b).value);
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)b).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)b).left;
                        semantico.quitarMarca();
                        semantico.quitarProximaMarca();
                        RESULT = new Nodo("CODIGO", new Nodo[]{(Nodo)rc1, id, (Nodo)rc2});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoFuncion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codigo ::= expresion 
            {
              Object RESULT =null;
		int llfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Nodo("EXPRESION",new Nodo[]{(Nodo) llf});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codigo ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("WHILE",new Nodo[]{(Nodo) w});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // codigo ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("IF",new Nodo[]{(Nodo) i});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // codigo ::= tryexcept 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("TRY-EXCEPT",new Nodo[]{(Nodo) t});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // codigo ::= for 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("FOR",new Nodo[]{(Nodo) f});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // codigo ::= return 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("RETURN",new Nodo[]{(Nodo) f});
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // codigo ::= funcDef 
            {
              Object RESULT =null;
		
                addError(new Nodo("Error: Declaracion en bloque de codigo, en la linea: "+_ultimaLineaDerecha));
                RESULT = new Nodo("Error: Declaracion en bloque de codigo, en la linea: "+_ultimaLineaDerecha);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // codigo ::= tipo 
            {
              Object RESULT =null;
		
                addError(new Nodo("Error: Declaracion en bloque de codigo, en la linea: "+_ultimaLineaDerecha));
                RESULT = new Nodo("Error: Declaracion en bloque de codigo: "+_ultimaLineaDerecha);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // return ::= RETURN expresion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            RESULT = new Nodo("CODIGO", new Nodo[]{id, (Nodo)e});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // return ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            RESULT = new Nodo("CODIGO", new Nodo[]{id});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for ::= FOR ID IN alcanceFor DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo forN=new Nodo((String)((java_cup.runtime.Symbol)f).value);
        Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
        Nodo inN=new Nodo((String)((java_cup.runtime.Symbol)in).value);
        Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
        semantico.quitarMarca();
        RESULT=new Nodo("Definición del ciclo For",new Nodo[]{forN,id,inN,(Nodo)af,dosp,(Nodo)cf,(Nodo)pc});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for ::= FOR error DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo forN=new Nodo((String)((java_cup.runtime.Symbol)f).value);
        Nodo id=new Nodo("Error en la declaracion del for, en la línea: "+((java_cup.runtime.Symbol)f).right);
        addError(id);
        Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
        semantico.quitarMarca();
        RESULT=new Nodo("Definición del ciclo For",new Nodo[]{forN,id, dosp,(Nodo)cf,(Nodo)pc});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for ::= FOR error puntoComa 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo forN=new Nodo((String)((java_cup.runtime.Symbol)f).value);
        Nodo dosp=new Nodo("Error en la definicion del For, en la linea: "+((java_cup.runtime.Symbol)f).right);
        addError(dosp);
        RESULT=new Nodo("Definición del ciclo For",new Nodo[]{forN, dosp ,(Nodo)pc});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // alcanceFor ::= rangoObjetos 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT=new Nodo("Rango de objetos",new Nodo[]{(Nodo)o});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alcanceFor",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // alcanceFor ::= rango 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT=new Nodo("Rango numérico",new Nodo[]{(Nodo)r});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alcanceFor",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rango ::= RANGE PARENTESISIZQ defRango PARENTESISDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo ran=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            Nodo piz=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo pder=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT=new Nodo("Range numerico",new Nodo[]{ran,piz,(Nodo)dr,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rango ::= RANGE PARENTESISIZQ error PARENTESISDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo ran = new Nodo((String)((java_cup.runtime.Symbol)r).value);
            Nodo piz=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo errorR=new Nodo("Error en los argumentos del rango de un for, en la línea: "+((java_cup.runtime.Symbol)pi).right);
            addError(errorR);
            Nodo pder=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT=new Nodo("Range numerico",new Nodo[]{ran,piz,errorR,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rango ::= RANGE PARENTESISIZQ defRango 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo ran=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            Nodo piz=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo pder=new Nodo("Error en la declaración del rango en un for, en la línea: "+((java_cup.runtime.Symbol)pi).right);
            addError(pder);
            RESULT=new Nodo("Range numerico",new Nodo[]{ran,piz,(Nodo)dr,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rango ::= RANGE PARENTESISIZQ 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo ran=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            Nodo piz=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo pder=new Nodo("Error en la declaración del rango en un for, en la línea: "+((java_cup.runtime.Symbol)pi).right);
            addError(pder);
            RESULT=new Nodo("Range numerico",new Nodo[]{ran,piz,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rango ::= RANGE defRango PARENTESISDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo ran=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            Nodo piz=new Nodo("Error en la declaración del rango en un for, en la línea: "+((java_cup.runtime.Symbol)pd).right);
            addError(piz);
            Nodo pder=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT=new Nodo("Range numerico",new Nodo[]{ran,piz,(Nodo)dr,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rango ::= RANGE PARENTESISDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo ran=new Nodo((String)((java_cup.runtime.Symbol)r).value);
            Nodo piz=new Nodo("Error en la declaración del rango en un for, en la línea: "+((java_cup.runtime.Symbol)pd).right);
            addError(piz);
            Nodo pder=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT=new Nodo("Range numerico",new Nodo[]{ran,piz,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rangoObjetos ::= objeto 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT=new Nodo("Objeto del rango",new Nodo[]{(Nodo)o});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangoObjetos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rangoObjetos ::= objeto COMA rangoObjetos 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo coma=new Nodo((String)((java_cup.runtime.Symbol)c).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{(Nodo)o,coma,(Nodo)ro});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangoObjetos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // defRango ::= objetoRango 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT=new Nodo("Objeto del rango",new Nodo[]{(Nodo)o});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defRango",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // defRango ::= objetoRango COMA objetoRango 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo coma=new Nodo((String)((java_cup.runtime.Symbol)c).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{(Nodo)o,coma,(Nodo)o1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defRango",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // defRango ::= objetoRango COMA objetoRango COMA objetoRango 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo coma=new Nodo((String)((java_cup.runtime.Symbol)c).value);
            Nodo coma1=new Nodo((String)((java_cup.runtime.Symbol)c1).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{(Nodo)o,coma,(Nodo)o1,coma1,(Nodo)o2});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defRango",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // objetoRango ::= LITERALINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)li).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)li).left;
            Nodo n=new Nodo((String)((java_cup.runtime.Symbol)li).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{n});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objetoRango",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // objetoRango ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{id});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objetoRango",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // objetoRango ::= variableIndexada 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)vi).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{id});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objetoRango",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // objetoRango ::= llamadoFuncion 
            {
              Object RESULT =null;
		int llfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo llamado=new Nodo((String)((java_cup.runtime.Symbol)llf).value);
            RESULT=new Nodo("Objeto del rango",new Nodo[]{llamado});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objetoRango",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tryexcept ::= TRY DOSPUNTOS codigoFuncion puntoComa except deffinally 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tryN=new Nodo((String)((java_cup.runtime.Symbol)t).value);
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.quitarProximaMarca();
            RESULT=new Nodo("Definicion de un try",new Nodo[]{tryN,dosp,(Nodo)cf,(Nodo)pc,
                            (Nodo)ex,(Nodo)f});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tryexcept",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tryexcept ::= TRY DOSPUNTOS codigoFuncion puntoComa except deffinally 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tryN=new Nodo((String)((java_cup.runtime.Symbol)t).value);
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.quitarProximaMarca();
            RESULT=new Nodo("Definicion de un try",new Nodo[]{tryN,dosp,(Nodo)cf,(Nodo)pc,
                            (Nodo)ex,(Nodo)f});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tryexcept",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tryexcept ::= TRY error puntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tryN=new Nodo((String)((java_cup.runtime.Symbol)t).value);
            Nodo errorT=new Nodo("Error en la definición del try, en la línea: "+((java_cup.runtime.Symbol)t).right);
            addError(errorT);
            Nodo errorE=new Nodo("Error seccion except no definida, especificamente en la línea del Try: "+((java_cup.runtime.Symbol)t).right);
           RESULT = new Nodo("TRY",new Nodo[]{tryN,errorT,(Nodo)pc,errorE});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tryexcept",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tryexcept ::= TRY error codigoFuncion puntoComa except deffinally 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tryN=new Nodo((String)((java_cup.runtime.Symbol)t).value);
            Nodo errorT=new Nodo("Error en la definición del try, en la línea: "+((java_cup.runtime.Symbol)t).right);
            addError(errorT);
            semantico.quitarProximaMarca();
           RESULT = new Nodo("TRY",new Nodo[]{tryN,errorT,(Nodo)cf,(Nodo)pc,(Nodo)ex,(Nodo)f});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tryexcept",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tryexcept ::= TRY error codigoFuncion puntoComa deffinally 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tryN=new Nodo((String)((java_cup.runtime.Symbol)t).value);
            Nodo errorT=new Nodo("Error en la definición del try, en la línea: "+((java_cup.runtime.Symbol)t).right);
            addError(errorT);
            Nodo errorE=new Nodo("Error seccion except no definida, especificamente en la línea del Try: "+((java_cup.runtime.Symbol)t).right);
            addError(errorE);
            semantico.quitarProximaMarca();
           RESULT = new Nodo("TRY",new Nodo[]{tryN,errorT,(Nodo)cf,(Nodo)pc,errorE,(Nodo)f});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tryexcept",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tryexcept ::= TRY DOSPUNTOS codigoFuncion puntoComa deffinally 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tryN=new Nodo((String)((java_cup.runtime.Symbol)t).value);
           Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            Nodo errorE=new Nodo("Error seccion except no definida, especificamente en la línea del Try: "+((java_cup.runtime.Symbol)t).right);
            addError(errorE);
            semantico.quitarProximaMarca();
           RESULT = new Nodo("TRY",new Nodo[]{tryN,dosp,(Nodo)cf,(Nodo)pc,errorE,(Nodo)f});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tryexcept",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // except ::= EXCEPT ID DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo except=new Nodo((String)((java_cup.runtime.Symbol)ex).value);
            Nodo error=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo dosp1=new Nodo((String)((java_cup.runtime.Symbol)dp1).value);
            semantico.quitarMarca();
            RESULT=new Nodo("Definicion de un except",new Nodo[]{except,error,dosp1,(Nodo)cf1,(Nodo)pc1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // except ::= EXCEPT DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo except=new Nodo((String)((java_cup.runtime.Symbol)ex).value);
            Nodo dosp1=new Nodo((String)((java_cup.runtime.Symbol)dp1).value);
            //Nodo pcoma1=new Nodo((String)((java_cup.runtime.Symbol)pc1).value);
            semantico.quitarMarca();
            RESULT=new Nodo("Definicion de un except",new Nodo[]{except,dosp1,(Nodo)cf1,(Nodo)pc1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // except ::= EXCEPT error DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo except=new Nodo((String)((java_cup.runtime.Symbol)ex).value);
            Nodo errorF=new Nodo("Error en el identificador del except, en la linea: "+((java_cup.runtime.Symbol)ex).right);
            addError(errorF);
            Nodo dosp1=new Nodo((String)((java_cup.runtime.Symbol)dp1).value);
            semantico.quitarMarca();
            RESULT=new Nodo("Definicion de un except",new Nodo[]{except,errorF,dosp1,(Nodo)cf1,(Nodo)pc1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // except ::= EXCEPT ID error puntoComa 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo except=new Nodo((String)((java_cup.runtime.Symbol)ex).value);
            Nodo errorE=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo errorN=new Nodo("Error en la definición del except, en la linea: "+((java_cup.runtime.Symbol)i).right);
            addError(errorN);
            RESULT=new Nodo("Definicion de un except",new Nodo[]{except,errorE,errorN,(Nodo)pc1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // except ::= EXCEPT error puntoComa 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo except=new Nodo((String)((java_cup.runtime.Symbol)ex).value);
            Nodo errorN=new Nodo("Error en la definición del except, en la linea: "+((java_cup.runtime.Symbol)ex).right);
            addError(errorN);
            RESULT=new Nodo("Definicion de un except",new Nodo[]{except,errorN,(Nodo)pc1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // deffinally ::= FINALLY DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo finallyN=new Nodo((String)((java_cup.runtime.Symbol)f).value);
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.quitarMarca();
            RESULT=new Nodo("Definicion de un finally",new Nodo[]{finallyN,dosp,(Nodo)cf,(Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deffinally",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // deffinally ::= 
            {
              Object RESULT =null;
		
            RESULT=new Nodo();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deffinally",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // deffinally ::= FINALLY error 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           Nodo finallyN=new Nodo((String)((java_cup.runtime.Symbol)f).value);
           Nodo errorD = new Nodo("Error sintactico en el finally, en la linea: "+((java_cup.runtime.Symbol)f).right);
           addError(errorD);
           RESULT=new Nodo("Finally", new Nodo[]{finallyN,errorD});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deffinally",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while ::= WHILE expresionBooleana DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.quitarMarca();
            RESULT = new Nodo("WHILE",new Nodo[]{whl, (Nodo) eb, dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // while ::= WHILE error DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo("Error en la definicion del While, en la linea: "+((java_cup.runtime.Symbol)w).right);
            addError(dosPuntos);
            semantico.quitarMarca();
            RESULT = new Nodo("WHILE",new Nodo[]{whl, dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while ::= WHILE error codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo("Error en la definicion del While, en la linea: "+((java_cup.runtime.Symbol)w).right);
            addError(dosPuntos);
            semantico.quitarMarca();
            RESULT = new Nodo("WHILE",new Nodo[]{whl, dosPuntos,(Nodo)c ,(Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if ::= IF expresionBooleana DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.recordarIF(true,((java_cup.runtime.Symbol)w).right,false);
            RESULT = new Nodo("IF",new Nodo[]{whl, (Nodo) eb, dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if ::= IF expresionBooleana DOSPUNTOS codigoFuncion puntoComa elseIf 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object eb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.recordarIF(false,((java_cup.runtime.Symbol)w).right,false);
            RESULT = new Nodo("IF",new Nodo[]{whl, (Nodo) eb, dosPuntos,(Nodo) c, (Nodo)pc,(Nodo)ei});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if ::= IF error DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            addError(new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right));
            semantico.quitarMarca();
            RESULT = new Nodo("IF",new Nodo[]{whl, new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right), dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if ::= IF error DOSPUNTOS codigoFuncion puntoComa elseIf 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            addError(new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right));
            semantico.quitarMarca();
            RESULT = new Nodo("IF",new Nodo[]{whl, new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right),
                                                 dosPuntos,(Nodo) c, (Nodo)pc,(Nodo)ei});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if ::= IF error puntoComa 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            addError(new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right));
            RESULT = new Nodo("IF",new Nodo[]{whl, new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right), 
                                                (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if ::= IF error puntoComa elseIf 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)w).value);
            addError(new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right));
            RESULT = new Nodo("IF",new Nodo[]{whl, new Nodo("Error en la definicion del If, en la linea: "+((java_cup.runtime.Symbol)w).right), 
                                    (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // elseIf ::= ELIF expresionBooleana DOSPUNTOS codigoFuncion puntoComa elseIf 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object eb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ei1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ei1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)ei).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.recordarIF(false,((java_cup.runtime.Symbol)ei).right,false);
            RESULT = new Nodo("ELIF",new Nodo[]{whl, (Nodo) eb, dosPuntos,(Nodo) c, (Nodo)pc,(Nodo)ei1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // elseIf ::= ELSE DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)e).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.recordarIF(true,((java_cup.runtime.Symbol)e).right,true);
            RESULT = new Nodo("ELSE",new Nodo[]{whl, dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // elseIf ::= ELIF error DOSPUNTOS codigoFuncion puntoComa elseIf 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ei1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ei1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)ei).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            addError(new Nodo("Error en la definicion del Elif, en la linea: "+((java_cup.runtime.Symbol)ei).right));
            semantico.quitarMarca();
            RESULT = new Nodo("ELIF",new Nodo[]{whl, new Nodo("Error en la definicion del Elif, en la linea: "+((java_cup.runtime.Symbol)ei).right), 
                        dosPuntos,(Nodo) c, (Nodo)pc,(Nodo)ei1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // elseIf ::= ELIF error puntoComa elseIf 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ei1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ei1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)ei).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)ei).left;
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)ei).value);
            Nodo dosPuntos=new Nodo("Error en la definicion del Elif, en la linea: "+((java_cup.runtime.Symbol)ei).right);
            addError(dosPuntos);
            RESULT = new Nodo("ELIF",new Nodo[]{whl, dosPuntos, (Nodo)pc,(Nodo)ei1});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // elseIf ::= ELSE error puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)e).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)e).left;
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)e).value);
            Nodo dosPuntos=new Nodo("Error en la definicion del else, en la linea: "+((java_cup.runtime.Symbol)e).right);
            addError(dosPuntos);
            RESULT = new Nodo("ELSE",new Nodo[]{whl, dosPuntos, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // elseIf ::= ELIF error DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)ei).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            addError(new Nodo("Error en la definicion del Elif, en la linea: "+((java_cup.runtime.Symbol)ei).right));
            semantico.quitarMarca();
            RESULT = new Nodo("ELIF",new Nodo[]{whl, new Nodo("Error en la definicion del Elif, en la linea: "+((java_cup.runtime.Symbol)ei).right), 
                        dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // elseIf ::= ELIF error puntoComa 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)ei).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)ei).left;
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)ei).value);
            Nodo dosPuntos=new Nodo("Error en la definicion del Elif, en la linea: "+((java_cup.runtime.Symbol)ei).right);
            addError(dosPuntos);
            RESULT = new Nodo("ELIF",new Nodo[]{whl, dosPuntos, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // elseIf ::= ELIF expresionBooleana DOSPUNTOS codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo whl=new Nodo((String)((java_cup.runtime.Symbol)ei).value);
            Nodo dosPuntos=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            semantico.recordarIF(true,((java_cup.runtime.Symbol)ei).right,false);
            RESULT = new Nodo("ELIF",new Nodo[]{whl, (Nodo) eb, dosPuntos,(Nodo) c, (Nodo)pc});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionBooleana ::= expresion IGUALCOMP expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionBooleana ::= expresion AND expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionBooleana ::= expresion OR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionBooleana ::= expresion NOT expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionBooleana ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionBooleana ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionBooleana ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionBooleana ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionBooleana ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionBooleana ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,((java_cup.runtime.Symbol)m).right);
                        semantico.crearOperacion();
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionBooleana ::= PARENTESISIZQ expresion PARENTESISDER 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                        Nodo n1=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
                        RESULT = new Nodo("Contenido", new Nodo[]{n, (Nodo)ca, n1});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionBooleana ::= PARENTESISIZQ expresionBooleana PARENTESISDER 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                        Nodo n1=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
                        RESULT = new Nodo("Contenido", new Nodo[]{n, (Nodo)ca, n1});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresionBooleana ::= objeto 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        semantico.marcaNull();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= ID opAsig expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                        semantico.recordarVariable(((java_cup.runtime.Symbol)i).right,(String)((java_cup.runtime.Symbol)i).value );
                        semantico.agregarAsignacion();
                        RESULT = new Nodo("ASIGNACION", new Nodo[]{n,(Nodo)op,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion ::= variableIndexada opAsig expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        semantico.ajustarPila();
                        semantico.agregarAsignacion();
                        RESULT = new Nodo("ASIGNACION", new Nodo[]{(Nodo)i,(Nodo)op,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion ::= expresion opAsig error 
            {
              Object RESULT =null;
		
                        addError(new Nodo("Error en la asignacion, en la línea: "+_ultimaLineaDerecha));
                        RESULT = new Nodo("Error en la asignacion, en la línea: "+_ultimaLineaDerecha);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= error opAsig expresion 
            {
              Object RESULT =null;
		
                        addError(new Nodo("Error en la asignacion, en la línea: "+_ultimaLineaIzquierda));
                        RESULT = new Nodo("Error en la asignacion, en la línea: "+_ultimaLineaIzquierda);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion ::= error opAsig error 
            {
              Object RESULT =null;
		
                        addError(new Nodo("Error en la asignacion, en la línea: "+_ultimaLineaDerecha));
                        RESULT = new Nodo("Error en la asignacion,  en la línea: "+_ultimaLineaDerecha);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // opAsig ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)a).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)a).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)a).value);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // opAsig ::= MASIGUAL 
            {
              Object RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)mi).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)mi).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)mi).value);
                        semantico.recordarAutoAsignador("+", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // opAsig ::= MENOSIGUAL 
            {
              Object RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)mi).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)mi).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)mi).value);
                        semantico.recordarAutoAsignador("-", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // opAsig ::= MULTIGUAL 
            {
              Object RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)mi).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)mi).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)mi).value);
                        semantico.recordarAutoAsignador("*", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // opAsig ::= DIVIGUAL 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)di).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)di).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)di).value);
                        semantico.recordarAutoAsignador("/", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opAsig ::= POTIGUAL 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)pi).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)pi).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                        semantico.recordarAutoAsignador("**", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // opAsig ::= DIVENTIGUAL 
            {
              Object RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)dei).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)dei).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)dei).value);
                        semantico.recordarAutoAsignador("//", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // opAsig ::= MODIGUAL 
            {
              Object RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        _ultimaLineaDerecha=((java_cup.runtime.Symbol)mi).right;
                        _ultimaLineaIzquierda=((java_cup.runtime.Symbol)mi).left;
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)mi).value);
                        semantico.recordarAutoAsignador("%", _ultimaLineaDerecha);
                        RESULT = new Nodo("OPERADOR", new Nodo[]{n});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= expresion DIVENT expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= expresion MOD expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= expresion POTENCIA expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= expresion IGUALCOMP expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion ::= expresion SHL expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion ::= expresion SHR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresion ::= expresion BITAND expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresion ::= expresion BITOR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresion ::= expresion BITXOR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresion ::= expresion BITNOT expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.recordarOperador((String)((java_cup.runtime.Symbol)m).value,caright);
                        semantico.crearOperacion();
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o,n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expresion ::= PARENTESISIZQ expresion PARENTESISDER 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                        Nodo n1=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
                        RESULT = new Nodo("Contenido", new Nodo[]{n, (Nodo)ca, n1});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresion ::= PARENTESISIZQ expresionBooleana PARENTESISDER 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                        Nodo n1=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
                        RESULT = new Nodo("Contenido", new Nodo[]{n, (Nodo)ca, n1});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresion ::= objeto 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Nodo("Contenido", new Nodo[]{(Nodo)o});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    addError(new Nodo("Error en la expresion, en la línea: "+_ultimaLineaDerecha));
                        RESULT = new Nodo("Error en la expresion, en la línea: "+_ultimaLineaDerecha);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresion ::= MENOS expresion 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo n=new Nodo((String)((java_cup.runtime.Symbol)m).value);
                        semantico.expressionNegativa();
                        RESULT = new Nodo("Contenido", new Nodo[]{n,(Nodo)ca});
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // objeto ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("CODIGO", new Nodo[]{(Nodo)a});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // objeto ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)i).value);
                semantico.recordarVariable(_ultimaLineaDerecha, (String)((java_cup.runtime.Symbol)i).value);
                semantico.validaVariable();
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // objeto ::= LITERALINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)li).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)li).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)li).value);
                semantico.recordarLiteral(((java_cup.runtime.Symbol)li).value,_ultimaLineaDerecha,"int");
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // objeto ::= LITERALFLOAT 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)lf).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)lf).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)lf).value);
                semantico.recordarLiteral(((java_cup.runtime.Symbol)lf).value,_ultimaLineaDerecha,"float");
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // objeto ::= LITERALSTRING 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)ls).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)ls).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)ls).value);
                semantico.recordarLiteral(((java_cup.runtime.Symbol)ls).value,_ultimaLineaDerecha,"string");
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // objeto ::= LITERALCHAR 
            {
              Object RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)lc).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)lc).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)lc).value);
                semantico.recordarLiteral(((java_cup.runtime.Symbol)lc).value,_ultimaLineaDerecha,"char");
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // objeto ::= LITERALFALSE 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)lf).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)lf).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)lf).value);
                semantico.recordarLiteral(((java_cup.runtime.Symbol)lf).value,_ultimaLineaDerecha,"boolean");
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // objeto ::= LITERALTRUE 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)lt).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)lt).left;
                Nodo n=new Nodo((String)((java_cup.runtime.Symbol)lt).value);
                semantico.recordarLiteral(((java_cup.runtime.Symbol)lt).value,_ultimaLineaDerecha,"boolean");
                RESULT = new Nodo("OBJETO", new Nodo[]{n});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // objeto ::= lista 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                semantico.recordarLista(_ultimaLineaDerecha);
                RESULT = new Nodo("OBJETO", new Nodo[]{(Nodo)l});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // objeto ::= llamadoFuncion 
            {
              Object RESULT =null;
		int llfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Nodo("OBJETO", new Nodo[]{(Nodo)llf});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // objeto ::= variableIndexada 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                semantico.validaVariable();
                RESULT = new Nodo("OBJETO", new Nodo[]{(Nodo)vi});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objeto",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lista ::= CORCHETEIZQ argumentosLista CORCHETEDER 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ci = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo corI = new Nodo((String)((java_cup.runtime.Symbol)ci).value);
            Nodo corD=new Nodo((String)((java_cup.runtime.Symbol)cd).value);
            RESULT= new Nodo("DEFINICION DE UNA LISTA",new Nodo[]{corI,(Nodo)al,corD});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // argumentosLista ::= elementoLista 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT= new Nodo("Argumentos de lista",new Nodo[]{(Nodo)el});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentosLista",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // argumentosLista ::= elementoLista COMA argumentosLista 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo coma=new Nodo((String)((java_cup.runtime.Symbol)c).value);
            RESULT= new Nodo("Argumentos de lista",new Nodo[]{(Nodo)el,coma,(Nodo)al});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentosLista",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // argumentosLista ::= 
            {
              Object RESULT =null;
		
            RESULT= new Nodo("Argumentos de lista");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentosLista",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // elementoLista ::= expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            semantico.agregarLista();
            RESULT= new Nodo("Elemento de lista",new Nodo[]{(Nodo)i});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoLista",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variableIndexada ::= ID corcheteIndexado 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ci = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            semantico.recordarVariableIndexada(((java_cup.runtime.Symbol)i).right, (String)((java_cup.runtime.Symbol)i).value);
            RESULT= new Nodo("Variable con indice de una lista",new Nodo[]{id,(Nodo)ci});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableIndexada",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // variableIndexada ::= ID error corcheteAux 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            addError(new Nodo("Error en la indexacion, en la línea: "+((java_cup.runtime.Symbol)i).right));
            RESULT= new Nodo("Error en la indexacion, en la línea: "+((java_cup.runtime.Symbol)i).right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableIndexada",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // corcheteIndexado ::= CORCHETEIZQ formaLista CORCHETEDER corcheteAux 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ci = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo corI=new Nodo((String)((java_cup.runtime.Symbol)ci).value);
            Nodo corD=new Nodo((String)((java_cup.runtime.Symbol)cd).value);
            RESULT= new Nodo("Indice de la variable",new Nodo[]{corI,(Nodo)fl,corD,(Nodo)ca});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corcheteIndexado",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // corcheteAux ::= corcheteIndexado 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT= new Nodo("Indice de la variable",new Nodo[]{(Nodo)ca});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corcheteAux",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // corcheteAux ::= 
            {
              Object RESULT =null;
		
            RESULT= new Nodo();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corcheteAux",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // formaLista ::= expresion 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT= new Nodo("Valor indice",new Nodo[]{(Nodo)al});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formaLista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // formaLista ::= DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            RESULT= new Nodo("Valor indice",new Nodo[]{dosp,(Nodo)al});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formaLista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // formaLista ::= expresion DOSPUNTOS 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            RESULT= new Nodo("Valor indice",new Nodo[]{(Nodo)al,dosp});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formaLista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // formaLista ::= expresion DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int al2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int al2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object al2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            RESULT= new Nodo("Valor indice",new Nodo[]{(Nodo)al,dosp, (Nodo)al2});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formaLista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // formaLista ::= DOSPUNTOS 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo dosp=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
            RESULT= new Nodo("Valor indice",new Nodo[]{dosp});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formaLista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // llamadoFuncion ::= ID PARENTESISIZQ argumentosFuncion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            semantico.crearLlamdoFuncion((String)((java_cup.runtime.Symbol)i).value, _ultimaLineaDerecha);
            RESULT= new Nodo("FUNCION",new Nodo[]{id,parI,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // llamadoFuncion ::= ID PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo parD=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            semantico.crearLlamdoFuncion((String)((java_cup.runtime.Symbol)i).value, _ultimaLineaDerecha);
            RESULT= new Nodo("FUNCION.",new Nodo[]{id,parI,parD});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // llamadoFuncion ::= PRINT PARENTESISIZQ argumentosFuncion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{id,parI,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // llamadoFuncion ::= PRINT PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            /*Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo parD=new Nodo((String)((java_cup.runtime.Symbol)pd).value);*/
            addError(new Nodo("Error: Print vacio,en la línea: "+((java_cup.runtime.Symbol)i).right));
            RESULT= new Nodo("Error: Print vacio,en la línea: "+((java_cup.runtime.Symbol)i).right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // llamadoFuncion ::= tipo PARENTESISIZQ argumentosFuncion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{(Nodo) i, parI,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // llamadoFuncion ::= tipo PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo parD=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT= new Nodo("FUNCION.",new Nodo[]{(Nodo) i, parI,parD});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // llamadoFuncion ::= INPUT PARENTESISIZQ argumentosFuncion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{id,parI,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // llamadoFuncion ::= INPUT PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id=new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo parI=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo parD=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT= new Nodo("FUNCION.",new Nodo[]{id,parI,parD});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // llamadoFuncion ::= LITERALSTRING PUNTO ID PARENTESISIZQ argumentosFuncion 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo str= new Nodo((String)((java_cup.runtime.Symbol)ls).value);
            Nodo pu= new Nodo((String)((java_cup.runtime.Symbol)p).value);
            Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo piz= new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{str,pu,id,piz,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // llamadoFuncion ::= LITERALSTRING PUNTO ID PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo str= new Nodo((String)((java_cup.runtime.Symbol)ls).value);
            Nodo pu= new Nodo((String)((java_cup.runtime.Symbol)p).value);
            Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo piz= new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo pder= new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{str,pu,id,piz,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // llamadoFuncion ::= ID PUNTO ID PARENTESISIZQ argumentosFuncion 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id1= new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo pu= new Nodo((String)((java_cup.runtime.Symbol)p).value);
            Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo piz= new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{id1,pu,id,piz,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // llamadoFuncion ::= ID PUNTO ID PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
            Nodo id1= new Nodo((String)((java_cup.runtime.Symbol)i1).value);
            Nodo pu= new Nodo((String)((java_cup.runtime.Symbol)p).value);
            Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
            Nodo piz= new Nodo((String)((java_cup.runtime.Symbol)pi).value);
            Nodo pder= new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            RESULT= new Nodo("FUNCION",new Nodo[]{id1,pu,id,piz,pder});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // argumentosFuncion ::= expresion PARENTESISDER 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo parD=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
            semantico.agregarArgumento();
            RESULT= new Nodo("ARGUMENTO",new Nodo[]{(Nodo)oa, parD});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentosFuncion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // argumentosFuncion ::= expresion COMA argumentosFuncion 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo coma=new Nodo((String)((java_cup.runtime.Symbol)c).value);
            semantico.agregarArgumento();
            RESULT= new Nodo("ARGUMENTO",new Nodo[]{(Nodo)oa,coma,(Nodo)af});
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentosFuncion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // argumentosFuncion ::= error 
            {
              Object RESULT =null;
		
            addError(new Nodo("Error en los argumentos de la funcion, en la línea: "+_ultimaLineaDerecha));
            RESULT= new Nodo("Error en los argumentos de la funcion, en la línea: "+_ultimaLineaDerecha);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentosFuncion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // funcDef ::= DEF ID parametros DOSPUNTOS variablesLocales codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		        
                Nodo def=new Nodo((String)((java_cup.runtime.Symbol)d).value);
                Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
                Nodo dosP=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
                semantico.quitarMarca();
                semantico.recordarID((String)((java_cup.runtime.Symbol)i).value, ((java_cup.runtime.Symbol)i).right);
                semantico.crearFuncion();
                RESULT = new Nodo("FUNCDEF", new Nodo[]{(Nodo)def, id, (Nodo) p, dosP,(Nodo) dv, (Nodo)cf, (Nodo)pc});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // funcDef ::= DEF error DOSPUNTOS variablesLocales codigoFuncion puntoComa 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		        
                Nodo def=new Nodo((String)((java_cup.runtime.Symbol)d).value);
                Nodo id= new Nodo("Error en la declaracion de la función, en la línea:"+((java_cup.runtime.Symbol)d).right);
                addError(id);
                Nodo dosP=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
                semantico.quitarMarca();
                RESULT = new Nodo("FUNCDEF", new Nodo[]{(Nodo)def, id, dosP,(Nodo) dv, (Nodo)cf, (Nodo)pc});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // funcDef ::= DEF DOSPUNTOS puntoComa 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		        
                Nodo def=new Nodo((String)((java_cup.runtime.Symbol)d).value);
                Nodo id= new Nodo("Error en la declaracion de la función, en la línea: "+((java_cup.runtime.Symbol)d).right);
                addError(id);
                Nodo dosP=new Nodo((String)((java_cup.runtime.Symbol)dp).value);
                RESULT = new Nodo("FUNCDEF", new Nodo[]{(Nodo)def, dosP, (Nodo)pc});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // funcDef ::= DEF error puntoComa 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo def=new Nodo((String)((java_cup.runtime.Symbol)d).value);
                Nodo id= new Nodo("Error en la declaracion de la función, en la línea:"+((java_cup.runtime.Symbol)d).right);
                addError(id);
                RESULT = new Nodo("FUNCDEF", new Nodo[]{(Nodo)def, id, (Nodo)pc});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // funcDef ::= DEF DOSPUNTOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object puntocoma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)puntocoma).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)puntocoma).left;
                Nodo def=new Nodo((String)((java_cup.runtime.Symbol)d).value);
                Nodo id= new Nodo("Error en la declaracion de la función, en la linea: "+((java_cup.runtime.Symbol)d).right);
                addError(id);
                Nodo pc=new Nodo((String)((java_cup.runtime.Symbol)puntocoma).value);
                RESULT = new Nodo("FUNCDEF", new Nodo[]{(Nodo)def, id, pc});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // funcDef ::= DEF error 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)d).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)d).left;
                Nodo def=new Nodo((String)((java_cup.runtime.Symbol)d).value);
                addError(new Nodo("Error en la definicion de la funcion, en la línea:"+((java_cup.runtime.Symbol)d).right));
                RESULT = new Nodo("Error en la definicion de la funcion, en la línea:"+((java_cup.runtime.Symbol)d).right, 
                                    new Nodo[]{(Nodo)def});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parametros ::= PARENTESISIZQ listaArg PARENTESISDER 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo pizq=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                Nodo pder=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
                semantico.agregarParametros();
                RESULT = new Nodo("PARAMETROS", new Nodo[] {pizq, (Nodo) la, pder});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // parametros ::= PARENTESISIZQ PARENTESISDER 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo pizq=new Nodo((String)((java_cup.runtime.Symbol)pi).value);
                Nodo pder=new Nodo((String)((java_cup.runtime.Symbol)pd).value);
                RESULT = new Nodo("PARAMETROS", new Nodo[] {pizq, pder});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // listaArg ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
                semantico.recordarID((String)((java_cup.runtime.Symbol)i).value, ((java_cup.runtime.Symbol)i).right);
                RESULT = new Nodo("LISTARG",new Nodo[] {(Nodo)t, id});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArg",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // listaArg ::= tipo ID COMA listaArg 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
                Nodo coma = new Nodo((String)((java_cup.runtime.Symbol)c).value);
                semantico.recordarID((String)((java_cup.runtime.Symbol)i).value, ((java_cup.runtime.Symbol)i).right);
                RESULT = new Nodo("LISTAARG",new Nodo[] {(Nodo)t, id,coma, (Nodo)la});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArg",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tipo ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)i).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)i).left;
                Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)i).value);
                semantico.recordarTipo((String)((java_cup.runtime.Symbol)i).value, _ultimaLineaDerecha);
                RESULT = new Nodo("TIPO",new Nodo[]{nodo});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tipo ::= LIST 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)l).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)l).left;
                Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)l).value);
                semantico.recordarTipo((String)((java_cup.runtime.Symbol)l).value, _ultimaLineaDerecha);
                RESULT = new Nodo("TIPO",new Nodo[]{nodo});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)f).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)f).left;
                Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)f).value);
                semantico.recordarTipo((String)((java_cup.runtime.Symbol)f).value, _ultimaLineaDerecha);
                RESULT = new Nodo("TIPO",new Nodo[]{nodo});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipo ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)s).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)s).left;
                Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)s).value);
                semantico.recordarTipo((String)((java_cup.runtime.Symbol)s).value, _ultimaLineaDerecha);
                RESULT = new Nodo("TIPO",new Nodo[]{nodo});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)b).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)b).left;
                Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)b).value);
                semantico.recordarTipo((String)((java_cup.runtime.Symbol)b).value, _ultimaLineaDerecha);
                RESULT = new Nodo("TIPO",new Nodo[]{nodo});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                _ultimaLineaDerecha=((java_cup.runtime.Symbol)c).right;
                _ultimaLineaIzquierda=((java_cup.runtime.Symbol)c).left;
                Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)c).value);
                semantico.recordarTipo((String)((java_cup.runtime.Symbol)c).value, _ultimaLineaDerecha);
                RESULT = new Nodo("TIPO",new Nodo[]{nodo});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // puntoComa ::= PUNTOYCOMA 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            _ultimaLineaDerecha=((java_cup.runtime.Symbol)pc).right;
            _ultimaLineaIzquierda=((java_cup.runtime.Symbol)pc).left;
            Nodo nodo= new Nodo((String)((java_cup.runtime.Symbol)pc).value);
            RESULT=nodo;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntoComa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // puntoComa ::= 
            {
              Object RESULT =null;
		
            addError(new Nodo("Se esperaba punto y coma, en la línea: "+_ultimaLineaDerecha));
            RESULT=new Nodo("Se esperaba punto y coma, en la línea: "+_ultimaLineaDerecha);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntoComa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // defClass ::= CLASS ID DOSPUNTOS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo classN= new Nodo((String)((java_cup.runtime.Symbol)c).value);
        Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
        Nodo dosp= new Nodo((String)((java_cup.runtime.Symbol)dp).value);
         RESULT=new Nodo("CLASE",new Nodo[]{classN,id,dosp});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defClass",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // defClass ::= CLASS ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo classN= new Nodo((String)((java_cup.runtime.Symbol)c).value);
        Nodo id= new Nodo((String)((java_cup.runtime.Symbol)i).value);
        Nodo dosp= new Nodo("Error en la definición de la clase, en la linea: "+((java_cup.runtime.Symbol)i).right);
        addError(dosp);
           RESULT=new Nodo("CLASE",new Nodo[]{classN,id,dosp});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defClass",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // defClass ::= CLASS error DOSPUNTOS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo classN= new Nodo((String)((java_cup.runtime.Symbol)c).value);
        Nodo id= new Nodo("Error en la definición de la clase, en la linea: "+((java_cup.runtime.Symbol)c).right);
        addError(id);
        Nodo dosp= new Nodo((String)((java_cup.runtime.Symbol)dp).value);
         RESULT=new Nodo("CLASE",new Nodo[]{classN,id,dosp});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defClass",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // defClass ::= CLASS error 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo classN= new Nodo((String)((java_cup.runtime.Symbol)c).value);
        Nodo id= new Nodo("Error en la definición de la clase, en la linea: "+((java_cup.runtime.Symbol)c).right);
        addError(id);
         RESULT=new Nodo("CLASE",new Nodo[]{classN,id});
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defClass",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
